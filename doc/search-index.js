var searchIndex = JSON.parse('{\
"hydro":{"doc":"","t":"DDDDDLFLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLECNCNNCIGECNNIINNCNDDDEINNKKLLLLLLLLLLLLKKKALKAKKLLLLLLAAKLLLLLLKAKKKKKAKKKKKKKAMMMLLLLLLLLLLLLLLLLLLALLLLLLKDDLLLLLLLLLLLLLLLMLLLLLLLLLLLLLDLLLLLLLMLMMLLLLLDDDLLLLLLLLLLMLLLLLMMMLLLLMMMLLMMLMLLLLLLLLLLLLLLLLLMLLLDLLLLLLLLLALLLLLLLLLNNDNNDIIINNGELKLLLLLLLLLLMLLLLKLKLLKLLLLLKLLMMKLMLLLLLLLLLLLLLLDLLLLLLFLLLMLLLLLLLLLLIKKKHDDDDDDDLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLMMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLF","n":["AnyhowError","AnyhowWrapper","Deployment","Host","Service","__clone_box","_core","arguments","arguments","arguments","arguments","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","core","deref","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","fmt","fmt","from","from","from","from","from","from_borrowed_ptr_or_opt","from_owned_ptr_or_opt","into","into","into","into","into","into_py","into_py","into_py","into_py","into_py","items_iter","items_iter","items_iter","items_iter","new_err","provide","source","to_object","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_unchecked","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_object_raw","type_object_raw","type_object_raw","type_object_raw","type_object_raw","underlying","vzip","vzip","vzip","vzip","vzip","wrap","wrap","wrap","wrap","ClientStrategy","CustomService","Demux","Deployment","ExternalTcpPort","ForwardedTcpPort","GCPComputeEngineHost","Host","HostStrategyGetter","HostTargetType","HydroflowCrate","InternalTcpPort","InternalTcpPort","LaunchedBinary","LaunchedHost","Linux","Local","LocalhostHost","Merge","ResourceBatch","ResourcePool","ResourceResult","ServerStrategy","Service","UnixSocket","UnixSocket","as_any","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_connect_to","collect_resources","collect_resources","custom_service","default","deploy","deployment","exit_code","forward_port","from","from","from","from","from","from","gcp","hydroflow_crate","id","into","into","into","into","into","into","launch_binary","localhost","provision","ready","request_custom_binary","request_port","server_config","ssh","start","stderr","stdin","stdout","stop","strategy_as_server","target_type","terraform","terraform","terraform","terraform","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","util","vzip","vzip","vzip","vzip","vzip","vzip","wait","CustomClientPort","CustomService","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","collect_resources","deploy","from","from","instantiate","instantiate_reverse","into","into","new","new","on","ready","send_to","server_port","start","stop","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Deployment","add_host","add_service","borrow","borrow_mut","default","deploy","from","hosts","into","resource_pool","services","start","try_from","try_into","type_id","vzip","GCPComputeEngineHost","GCPNetwork","LaunchedComputeEngine","as_any","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_connect_to","collect_resources","external_ip","forward_port","from","from","from","id","id","image","internal_ip","into","into","into","launch_binary","launched","machine_type","network","new","open_ssh_session","project","project","provision","region","request_custom_binary","request_port","resource_result","server_config","server_config","ssh_key_path","strategy_as_server","target_type","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vpc_id","vzip","vzip","vzip","HydroflowCrate","add_connection","borrow","borrow_mut","collect_resources","deploy","exit_code","from","into","new","ports","ready","start","stderr","stdout","stop","try_from","try_into","type_id","vzip","Demux","DemuxSelect","DemuxSink","Direct","Forwarded","HydroflowPortConfig","HydroflowServer","HydroflowSink","HydroflowSource","Merge","MergeSelect","ReverseSinkInstantiator","ServerConfig","__clone_box","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","demux","from","from","from","from_strategy","get_port","get_port","instantiate","instantiate","instantiate","instantiate_reverse","instantiate_reverse","instantiate_reverse","into","into","into","launched_host","launched_host","merge","merge","port","send_to","send_to","service","sink_port","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LocalhostHost","as_any","as_any_mut","borrow","borrow_mut","can_connect_to","collect_resources","create_broadcast","fmt","from","id","id","into","provision","request_custom_binary","request_port","strategy_as_server","target_type","try_from","try_into","type_id","vzip","LaunchedSSHHost","open_ssh_session","resource_result","server_config","TERRAFORM_ALPHABET","TerraformBatch","TerraformConfig","TerraformOutput","TerraformPool","TerraformProvider","TerraformResult","TerraformResultOutput","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","deployment_folder","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","from","from","from","from","from","from","from","into","into","into","into","into","into","into","output","outputs","provision","required_providers","resource","serialize","serialize","serialize","serialize","serialize","source","terraform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","async_retry"],"q":["hydro","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro::core::custom_service","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro::core::deployment","","","","","","","","","","","","","","","","","hydro::core::gcp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro::core::hydroflow_crate","","","","","","","","","","","","","","","","","","","","hydro::core::hydroflow_crate::ports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro::core::localhost","","","","","","","","","","","","","","","","","","","","","","hydro::core::ssh","","","","hydro::core::terraform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydro::core::util"],"d":["","","","","","","","","","","","Gets the underlying FFI pointer, returns a borrowed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Creates a new <code>PyErr</code> of this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Like BindType, but includes metadata for determining …","","","","","","","","","","","","","","","","","","","","","","Types of connections that a host can make to another host.","","","","Returns a reference to the host as a trait object.","Returns a reference to the host as a trait object.","","","","","","","","","","","","","Determines whether this host can connect to another host …","Makes requests for physical resources (servers) that this …","Makes requests for physical resources server ports that …","","","Connects to the acquired resources and prepares the …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","An identifier for this host, which is unique within a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Connects to the acquired resources and prepares the host …","Launches the service, which should start listening for …","Configures the host to support copying and running a …","","Given a pre-selected network type, computes concrete …","","Starts the service by having it connect to other services …","","","","Stops the service by having it disconnect from other …","Identifies a network type that this host can use for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an unknown, third-party service that is not …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","A demux that will be used at runtime to listen to many …","The other side of a demux, with a port to extract the …","","","","","","","","A merge that will be used at runtime to combine many …","The other side of a merge, with a port to extract the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Instantiate the sink as the source host connecting to the …","","","Instantiate the sink, but as the sink host connecting to …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Keeps track of resources which may need to be cleaned up.","","","","","","","","","","","","","","","","","","","","<code>None</code> if no deployment was performed","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,9,0,9,12,13,14,7,7,7,9,12,13,14,7,9,12,13,14,9,9,0,7,7,9,9,9,12,12,13,13,14,14,7,7,7,9,12,13,14,7,7,7,9,12,13,14,7,9,12,13,14,9,12,13,14,7,7,7,7,9,7,7,7,9,12,13,14,7,7,7,9,12,13,14,7,9,12,13,14,7,9,12,13,14,9,7,9,12,13,14,9,12,13,14,0,0,38,0,38,27,0,0,0,0,0,38,27,0,0,42,42,0,38,0,0,0,0,0,38,27,40,40,29,82,38,27,42,30,29,82,38,27,42,30,40,40,55,0,30,55,0,83,84,29,82,38,27,42,30,0,0,40,29,82,38,27,42,30,84,0,40,55,40,40,84,0,55,83,83,83,55,40,40,0,29,82,30,29,82,38,27,42,30,29,82,38,27,42,30,29,82,38,27,42,30,0,29,82,38,27,42,30,83,0,0,43,44,43,44,43,44,44,44,43,43,43,44,43,44,43,43,44,43,43,44,44,44,43,44,43,44,43,44,43,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,0,0,56,56,59,58,56,59,58,56,56,56,59,59,59,58,56,56,56,56,59,59,58,56,59,56,56,56,56,59,58,56,56,56,56,56,59,59,59,59,56,56,59,58,56,59,58,56,59,58,56,58,59,58,56,0,61,61,61,61,61,61,61,61,61,0,61,61,61,61,61,61,61,61,61,66,66,0,66,66,0,0,0,0,66,66,0,0,65,52,64,65,64,66,65,64,66,65,65,65,64,64,66,65,66,46,65,52,64,65,52,64,65,64,66,65,46,65,65,65,65,85,65,65,66,65,64,66,65,64,66,65,64,66,65,64,66,65,0,68,68,68,68,68,68,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,86,86,86,0,0,0,0,0,0,0,0,80,74,75,76,77,78,79,80,74,75,76,77,78,79,74,75,80,75,76,77,78,79,80,74,80,74,75,76,77,78,79,80,74,75,76,77,78,79,75,80,75,76,75,75,76,77,78,79,77,75,80,74,75,76,77,78,79,80,74,75,76,77,78,79,80,74,75,76,77,78,79,78,77,80,74,75,76,77,78,79,0],"f":[0,0,0,0,0,[1],[[2,3],4],[2,[[6,[5]]]],[2,[[6,[5]]]],[2,[[6,[5]]]],[2,[[6,[5]]]],[7,8],[7,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[[]],0,[7,5],[5,[[4,[7]]]],[5,[[4,[9]]]],[5,[[11,[10]]]],[5,[[4,[9]]]],[5,[[4,[12]]]],[5,[[4,[12]]]],[5,[[4,[13]]]],[5,[[4,[13]]]],[5,[[4,[14]]]],[5,[[4,[14]]]],[[7,15],[[11,[16]]]],[[7,15],[[11,[16]]]],[[]],[[]],[[]],[[]],[[]],[[2,8],17],[[2,8],17],[[]],[[]],[[]],[[]],[[]],[[7,2],[[6,[7]]]],[[9,2],18],[[12,2],18],[[13,2],18],[[14,2],18],[[],19],[[],19],[[],19],[[],19],[[],10],[20],[7,[[17,[21]]]],[[7,2],18],[[]],[[],22],[[],11],[[],[[11,[23]]]],[[],11],[[],11],[[],11],[[],11],[[],[[11,[23]]]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],24],[[],24],[[],24],[[],24],[[],24],[2,25],[2,25],[2,25],[2,25],[2,25],0,[[]],[[]],[[]],[[]],[[]],[2,[[11,[[6,[5]],10]]]],[2,[[11,[[6,[5]],10]]]],[2,[[11,[[6,[5]],10]]]],[2,[[11,[[6,[5]],10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],26],[[],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,28],[29],[29],0,[[],30],[31,[[34,[[33,[32]]]]]],0,[[],[[34,[[33,[32]]]]]],[35,[[34,[[33,[32]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],36],[[]],[[]],[[]],[[]],[[]],[[]],[37,[[34,[[33,[32]]]]]],0,[31,[[34,[[33,[32]]]]]],[[],[[34,[[33,[32]]]]]],[[]],[38],[38,39],0,[[],[[34,[[33,[32]]]]]],[[],[[34,[[33,[32]]]]]],[[],[[34,[[33,[32]]]]]],[[],[[34,[[33,[32]]]]]],[[],[[34,[[33,[32]]]]]],[[[17,[40]]],41],[[],42],0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],[[34,[[33,[32]]]]]],0,0,[43,26],[[]],[[]],[[]],[[]],[[44,29]],[[44,31],[[34,[[33,[32]]]]]],[[]],[[]],[[43,31],[[41,[[33,[45]]]]]],[[43,31,[33,[46]],47],[[41,[[33,[45]]]]]],[[]],[[]],[[[31,[[48,[40]]]],[50,[49]]],44],[[[51,[[48,[44]]]]],43],0,[44,[[34,[[33,[32]]]]]],[[43,52]],[43,53],[44,[[34,[[33,[32]]]]]],[44,[[34,[[33,[32]]]]]],[[],11],[[],11],[[],11],[[],11],[[],24],[[],24],[[]],[[]],0,[[54,45],[[31,[[48,[40]]]]]],[[54,55],[[31,[[48,[55]]]]]],[[]],[[]],[[],54],[54,41],[[]],0,[[]],0,0,[54],[[],11],[[],11],[[],24],[[]],0,0,0,[56,26],[56,26],[[]],[[]],[[]],[[]],[[]],[[]],[[56,27],28],[[56,29]],0,[35,[[34,[[33,[32,57]]]]]],[[]],[[]],[[]],[56,36],0,0,0,[[]],[[]],[[]],[37,[[34,[[33,[32,57]]]]]],0,0,0,[[36,22,22,22,22,[31,[[48,[58]]]]],56],[59,[[34,[[33,[32]]]]]],0,0,[[56,31],[[34,[[33,[32]]]]]],0,[56],[[56,38]],[59,31],[[59,38],39],[38,39],[59,60],[[56,[17,[40]]],41],[56,42],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],24],[[],24],[[],24],0,[[]],[[]],[[]],0,[[61,31,22,52],41],[[]],[[]],[[61,29]],[[61,31],[[34,[[33,[32]]]]]],[61,[[17,[62]]]],[[]],[[]],[[60,[31,[[48,[40]]]],[17,[22]],[17,[[50,[22]]]],[17,[[50,[22]]]]],61],0,[61,[[34,[[33,[32]]]]]],[61,[[34,[[33,[32]]]]]],[61,[[63,[22]]]],[61,[[63,[22]]]],[61,[[34,[[33,[32]]]]]],[[],11],[[],11],[[],24],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],26],[64,26],[65,26],[[]],[[]],[[]],[[]],[[]],[[]],[65,65],[[]],0,[[]],[[]],[[]],[[27,[33,[46]]],66],[[],[[34,[[33,[32]]]]]],[65,[[34,[[33,[32]]]]]],[31,[[41,[[33,[45]]]]]],[[64,31],[[41,[[33,[45]]]]]],[[65,31],[[41,[[33,[45]]]]]],[[31,[33,[46]],47],[[41,[67]]]],[[64,31,[33,[46]],47],[[41,[[33,[45]]]]]],[[65,31,[33,[46]],47],[[41,[[33,[45]]]]]],[[]],[[]],[[]],[[],[[34,[[33,[32]]]]]],[65,[[34,[[33,[32]]]]]],[65,65],0,0,[52],[[65,52]],0,[66,[[34,[[33,[32]]]]]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],24],[[],24],[[],24],[[]],[[]],[[]],0,[68,26],[68,26],[[]],[[]],[[68,27],28],[[68,29]],[[[0,[69,70,71]],[0,[47,70]]],[[31,[[48,[[50,[[72,[22]]]]]]]]]],[[68,15],73],[[]],[68,36],0,[[]],[[68,31],[[34,[[33,[32]]]]]],[68],[[68,38]],[[68,[17,[40]]],41],[68,42],[[],11],[[],11],[[],24],[[]],0,[[],[[34,[[33,[32]]]]]],[[],31],[38,39],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],74],[[],75],0,[[],[[11,[75]]]],[[],[[11,[76]]]],[[],[[11,[77]]]],[[],[[11,[78]]]],[[],[[11,[79]]]],[80],[74],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[75,74],[[41,[80]]]],0,0,[75,11],[76,11],[77,11],[78,11],[79,11],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[47,36,81],41]],"p":[[3,"Private"],[3,"Python"],[3,"PyModule"],[6,"PyResult"],[3,"PyAny"],[3,"Py"],[3,"AnyhowError"],[3,"PyObject"],[3,"AnyhowWrapper"],[3,"PyErr"],[4,"Result"],[3,"Deployment"],[3,"Host"],[3,"Service"],[3,"Formatter"],[3,"Error"],[4,"Option"],[6,"PyObject"],[3,"PyClassItemsIter"],[3,"Demand"],[8,"Error"],[3,"String"],[3,"PyDowncastError"],[3,"TypeId"],[3,"PyTypeObject"],[8,"Any"],[4,"ClientStrategy"],[15,"bool"],[3,"ResourceBatch"],[3,"ResourcePool"],[3,"Arc"],[8,"Future"],[3,"Box"],[3,"Pin"],[4,"SocketAddr"],[15,"usize"],[3,"Path"],[4,"ServerStrategy"],[4,"ServerBindConfig"],[8,"Host"],[6,"Result"],[4,"HostTargetType"],[3,"CustomClientPort"],[3,"CustomService"],[8,"FnOnce"],[8,"HydroflowServer"],[8,"Fn"],[3,"RwLock"],[15,"u16"],[3,"Vec"],[3,"Weak"],[8,"HydroflowSink"],[4,"ServerOrBound"],[3,"Deployment"],[8,"Service"],[3,"GCPComputeEngineHost"],[3,"Global"],[3,"GCPNetwork"],[3,"LaunchedComputeEngine"],[3,"PathBuf"],[3,"HydroflowCrate"],[15,"i32"],[3,"Receiver"],[3,"DemuxSink"],[3,"HydroflowPortConfig"],[4,"ServerConfig"],[6,"ReverseSinkInstantiator"],[3,"LocalhostHost"],[8,"AsyncRead"],[8,"Send"],[8,"Unpin"],[3,"Sender"],[6,"Result"],[3,"TerraformPool"],[3,"TerraformBatch"],[3,"TerraformConfig"],[3,"TerraformProvider"],[3,"TerraformOutput"],[3,"TerraformResultOutput"],[3,"TerraformResult"],[3,"Duration"],[3,"ResourceResult"],[8,"LaunchedBinary"],[8,"LaunchedHost"],[8,"HydroflowSource"],[8,"LaunchedSSHHost"]]},\
"hydroflow":{"doc":"","t":"OOOOCACOOAACOOOOACCCCCCAOOOCAADDDDDGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLAAAAAIDLLKLLLLLLLLLLLLLLLDIQDQDDLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLMLLLLLLLLLLLLLLLLLLMIIIQIQIIQIAKKKAKKAKAAAAKDLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLIDDLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLIDDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLDLLLLLLLLLLLLLLLDEEQQEEDEEIIELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDQDQDDIIIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAQQIIDDDLLLLLLLLLLLLALLLLLLLLLLLAAALLLALLLAAAALLALLLLLLLLLLLLLLADLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKKKKKKKKKKIIIQDIDKLLLLLLKLLLLLLLLKLLLLALLKLLKLLLLLLKLLLLLQIIIQKKKDIDLLLLLLLLLLKLLLLLLLLLLLLDMMLLLLLLLLLALLLLGIDDEGGEGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLDDLLLLLLLLLFLLLLLLLGGGGGGGGFFFFFFFFFFFFFFFFFFFFFF","n":["assert_graphvis_snapshots","assert_graphvis_snapshots","assert_var_impl","assert_var_impl","bytes","compiled","futures","hydroflow_parser","hydroflow_syntax","lang","props","pusherator","rassert","rassert","rassert_eq","rassert_eq","scheduled","serde","serde_json","static_assertions","tokio","tokio_stream","tokio_util","util","var_args","var_expr","var_type","variadics","pull","push_handoff","BatchJoin","BatchJoinState","CrossJoin","CrossJoinState","HalfJoinState","JoinState","JoinStateMut","SymmetricHashJoin","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","new","new","new","new_from_mut","next","next","next","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","PushHandoff","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","clear","collections","lattice","monotonic_map","tag","Clear","ClearDefault","borrow","borrow_mut","clear","clear","clone","clone_into","cmp","default","eq","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","Array","Collection","Entries","Iter","Keys","MaskedArray","Single","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","entries","entries","entries","entries","entries","entries","entries","eq","eq","eq","eq","fmt","fmt","from","from","from","from","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","hash","hash","hash","hash","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","keys","keys","keys","keys","keys","keys","keys","len","len","len","len","len","len","len","mask","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vals","Compare","Convert","Debottom","DebottomLr","Lattice","Lattice","LatticeRepr","Merge","Repr","Top","bottom","compare","convert","debottom","dom_pair","is_bottom","is_top","map_union","merge","ord","pair","set_union","top","top","BottomRepr","borrow","borrow_mut","debottom","from","into","is_bottom","try_from","try_into","type_id","DomPair","DomPairRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","debottom","from","from","into","into","is_bottom","is_top","merge","top","try_from","try_from","try_into","try_into","type_id","type_id","MapTag","MapUnion","MapUnionRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","from","from","into","into","merge","try_from","try_from","try_into","try_into","type_id","type_id","Max","MaxRepr","Min","MinRepr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compare","compare","convert","convert","from","from","from","from","into","into","into","into","is_top","merge","merge","top","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Pair","PairRepr","borrow","borrow","borrow_mut","borrow_mut","compare","debottom","from","from","into","into","is_bottom","is_top","merge","top","try_from","try_from","try_into","try_into","type_id","type_id","SetTag","SetUnion","SetUnionRepr","borrow","borrow","borrow_mut","borrow_mut","compare","convert","debottom","from","from","into","into","is_bottom","merge","try_from","try_from","try_into","try_into","type_id","type_id","TopRepr","borrow","borrow_mut","from","into","is_top","top","try_from","try_into","type_id","MonotonicMap","borrow","borrow_mut","clone","clone_into","default","fmt","from","get_mut","into","new_init","to_owned","try_from","try_insert_with","try_into","type_id","ARRAY","BTREE_MAP","BTREE_SET","Bind","Bind","HASH_MAP","HASH_SET","MASKED_ARRAY","OPTION","SINGLE","Tag1","Tag2","VEC","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Consecutive","Duplicates","Duplicates","Monotonic","Monotonicity","NoDuplicates","NonMonotonic","PropDuplicates","PropMonotonicity","Props","Spec","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrap","Props","Props","PullSpec","PushSpec","HandoffId","StateId","SubgraphId","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","graph","graph_ext","handoff","hash","hash","hash","input","into","into","into","net","port","query","reactor","serialize","serialize","state","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","util","Context","abort_tasks","add_state","borrow","borrow_mut","current_stratum","current_subgraph","current_tick","from","into","join_tasks","remove_state","schedule_subgraph","spawn_task","state_mut","state_ref","try_from","try_into","type_id","waker","HandoffData","Hydroflow","abort_tasks","add_channel_input","add_input","add_input_from_stream","add_read_tcp_stream","add_state","add_subgraph","add_subgraph_2in_2out","add_subgraph_2in_out","add_subgraph_2sink","add_subgraph_in_2out","add_subgraph_in_out","add_subgraph_n_m","add_subgraph_sink","add_subgraph_source","add_subgraph_stratified","add_subgraph_stratified_n_m","add_tcp_stream","add_write_tcp_stream","borrow","borrow","borrow_mut","borrow_mut","context_mut","current_stratum","current_tick","default","drop","fmt","from","from","inbound_tcp_vertex","inbound_tcp_vertex_port","into","into","join_tasks","make_edge","meta_graph","new","new","new_with_graph","next_stratum","outbound_tcp_vertex","reactor","recv_events","recv_events_async","run","run_async","run_available","run_stratum","run_tick","spawn_task","try_from","try_from","try_into","try_into","try_recv_events","type_id","type_id","GraphExt","add_channel_input","add_input","add_input_from_stream","add_subgraph_2in_2out","add_subgraph_2in_out","add_subgraph_2sink","add_subgraph_in_2out","add_subgraph_in_out","add_subgraph_sink","add_subgraph_source","CanReceive","Handoff","HandoffMeta","Inner","TeeingHandoff","TryCanReceive","VecHandoff","any_ref","any_ref","any_ref","borrow","borrow","borrow_mut","borrow_mut","borrow_mut_swap","borrow_mut_swap","borrow_mut_swap","clone","clone_into","default","default","from","from","give","give","give","give","give","handoff_list","into","into","is_bottom","is_bottom","is_bottom","take_inner","take_inner","take_inner","tee","to_owned","try_from","try_from","try_give","try_give","try_into","try_into","type_id","type_id","Ctx","HandoffList","PortList","PortListSplit","Suffix","make_ctx","set_graph_meta","split_ctx","Buffer","Give","Input","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","flush","from","from","give","give","give","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Message","address","batch","borrow","borrow_mut","clone","clone_into","decode","eq","fmt","from","into","network_vertex","to_owned","try_from","try_into","type_id","Address","Polarity","Port","PortCtx","RECV","RecvCtx","RecvPort","SEND","SendCtx","SendPort","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut_swap","borrow_mut_swap","from","from","from","from","give","give","into","into","into","into","ref_cast","ref_cast_mut","take_inner","take_inner","try_from","try_from","try_from","try_from","try_give","try_give","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Operator","Query","borrow","borrow","borrow_mut","borrow_mut","concat","concat","default","filter","from","from","into","into","map","new","run_available","sink","source","tee","try_from","try_from","try_into","try_into","type_id","type_id","Reactor","borrow","borrow_mut","clone","clone_into","from","into","into_waker","new","to_owned","trigger","try_from","try_into","type_id","StateHandle","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","Once","SendOnce","borrow","borrow","borrow_mut","borrow_mut","from","from","get","into","into","once","send","try_from","try_from","try_into","try_into","type_id","type_id","UdpBytesSink","UdpBytesStream","UdpFramedSink","UdpFramedStream","UdpLinesSink","UdpLinesStream","UdpSink","UdpStream","bind_udp_bytes","bind_udp_lines","collect_ready","collect_ready_async","deserialize_from_bytes","ipv4_resolve","ready_iter","serialize_to_bytes","sort_unstable_by_key_hrtb","tcp_bytes","tcp_bytestream","tcp_framed","tcp_lines","udp_bytes","udp_bytestream","udp_framed","udp_lines","unbounded_channel","unix_bytes","unix_bytestream","unix_framed","unix_lines"],"q":["hydroflow","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::compiled","","hydroflow::compiled::pull","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::compiled::push_handoff","","","","","","","","","","hydroflow::lang","","","","","hydroflow::lang::clear","","","","","","","","","","","","","","","","","","","","hydroflow::lang::collections","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::bottom","","","","","","","","","","hydroflow::lang::lattice::dom_pair","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::map_union","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::ord","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::pair","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::set_union","","","","","","","","","","","","","","","","","","","","","","hydroflow::lang::lattice::top","","","","","","","","","","hydroflow::lang::monotonic_map","","","","","","","","","","","","","","","","hydroflow::lang::tag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::props","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::props::wrap","","","","hydroflow::scheduled","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::context","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::graph","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::graph_ext","","","","","","","","","","","hydroflow::scheduled::handoff","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::handoff::handoff_list","","","","","","","","hydroflow::scheduled::input","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::net","","","","","","","","","","","","","","","","","hydroflow::scheduled::net::network_vertex","hydroflow::scheduled::port","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::query","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow::scheduled::reactor","","","","","","","","","","","","","","hydroflow::scheduled::state","","","","","","","","","","","","hydroflow::scheduled::util","","","","","","","","","","","","","","","","","","","hydroflow::util","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Asserts that the variable’s type implements the given …","Asserts that the variable’s type implements the given …","","","","","","","","","","","","","","","","","","","","Helper utilities for the Hydroflow surface syntax.","Macro for pattern-matching with variadic tuples. This is …","Macro creating a variadic tuple value from a list of …","Macro creating a variadic tuple type from a list of types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","A trait for abstracting over the <code>.clear()</code> method available …","","","","Clears the collection without neccesarily freeing …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merge DELTA into THIS. Return TRUE if THIS changed, FALSE …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","A map-like interface which in reality only stores one …","","","","","","","Returns the argument unchanged.","Returns the value for the monotonically increasing key, or …","Calls <code>U::from(self)</code>.","Creates a new <code>MonotonicMap</code> initialized with the given …","","","Inserts the value using the function if new <code>key</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","A handoff’s ID. Invalid if used in a different …","A staten handle’s ID. Invalid if used in a different …","A subgraph’s ID. Invalid if used in a different …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This module contiains networking code.","Organizational module for Hydroflow Send/RecvCtx structs …","","","","","","","","","","","","","","","","","","","","","The main state of the Hydroflow instance, which is …","","Adds state to the context and returns the handle.","","","Gets the current stratum nubmer.","Gets the ID of the current subgraph.","Gets the current tick (local time) count.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Removes state from the context returns it as an owned heap …","Schedules a subgraph.","","Returns an exclusive reference to the state.","Returns a shared reference to the state.","","","","Returns a <code>Waker</code> for interacting with async Rust. Waker …","A handoff and its input and output SubgraphIds.","A Hydroflow graph. Owns, schedules, and runs the compiled …","","","","","","","","","","","","","Adds a new compiled subgraph with a variable number of …","","","Adds a new compiled subgraph with the specified inputs and …","Adds a new compiled subgraph with a variable number of …","","","","","","","Gets a exclusive (mut) ref to the internal context, …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a handoff edge and returns the corresponding send …","","Create a new empty Hydroflow graph.","","Create a new empty Hydroflow graph with the given …","Go to the next stratum which has work available, possibly …","","Returns a reactor for externally scheduling subgraphs, …","Enqueues subgraphs triggered by external events, blocking …","Enqueues subgraphs triggered by external events …","Runs the dataflow graph forever.","Runs the dataflow graph forever.","Runs the dataflow until no more work is immediately …","Runs the current stratum of the dataflow until no more …","Runs the dataflow until the next tick begins. Returns true …","","","","","","Enqueues subgraphs triggered by events without blocking.","","","Convenience extension methods for the Hydroflow struct.","","Adds an “input” operator, returning a handle to insert …","","","","","","","","","","","A handle onto the metadata part of a Handoff, with no …","","","","A Vec-based FIFO handoff.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","A variadic list of Handoff types, represented using a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","An empty trait used to denote <code>Polarity</code>: either <strong>send</strong> or …","","","An uninstantiable type used to tag port <code>Polarity</code> as <strong>receive</strong>…","","","An uninstantiable type used to tag port <code>Polarity</code> as <strong>send</strong>.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A handle into a specific super::graph::Hydroflow instance …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","The receiving half of a once channel.","The sending half of a once channel.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a once channel where the SendOnce end can set a …","","","","","","","","","","","","","","","","","","Collects the immediately available items from the <code>Stream</code> …","Collects the immediately available items from the <code>Stream</code> …","","","","","","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for undelimited …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> from the given …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>str</code>ings delimited …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for undelimited …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> from the given …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>str</code>ings delimited …","","Helper creates a Unix <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …","Helper creates a Unix <code>Stream</code> and <code>Sink</code> for undelimited …","Helper creates a Unix <code>Stream</code> and <code>Sink</code> from the given …","Helper creates a Unix <code>Stream</code> and <code>Sink</code> for <code>str</code>ings …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,1,8,10,2,3,7,1,8,10,2,3,1,2,3,2,3,7,1,8,10,2,3,7,1,8,10,2,3,7,8,10,7,8,10,10,7,8,10,7,1,8,10,2,3,7,1,8,10,2,3,7,1,8,10,2,3,0,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,16,16,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,85,0,85,0,0,20,21,22,23,20,21,22,23,20,21,22,23,20,21,22,23,20,21,85,20,20,22,22,23,23,20,21,22,23,20,21,20,21,22,23,85,20,20,22,22,23,23,85,20,20,22,22,23,23,20,21,22,23,20,21,22,23,20,21,22,23,85,85,20,20,22,22,23,23,85,20,20,22,22,23,23,23,20,21,20,21,22,23,20,21,22,23,20,21,22,23,20,21,22,23,23,0,0,0,86,0,87,0,0,87,0,0,88,89,86,0,86,90,0,91,0,0,0,0,90,0,92,92,92,92,92,92,92,92,92,0,0,93,94,93,94,94,94,94,93,94,93,94,94,94,94,94,93,94,93,94,93,94,0,0,0,95,96,95,96,96,96,95,96,95,96,96,95,96,95,96,95,96,0,0,0,0,97,98,99,100,97,98,99,100,98,100,98,100,97,98,99,100,97,98,99,100,98,98,100,98,97,98,99,100,97,98,99,100,97,98,99,100,0,0,101,102,101,102,102,102,101,102,101,102,102,102,102,102,101,102,101,102,101,102,0,0,0,103,104,103,104,104,104,104,103,104,103,104,104,104,103,104,103,104,103,104,0,105,105,105,105,105,105,105,105,105,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,106,107,0,0,0,0,0,0,0,0,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,108,109,110,111,112,113,114,115,116,0,0,117,0,117,0,0,0,0,0,0,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,118,119,120,121,122,0,123,124,0,0,0,0,0,32,33,34,32,33,34,32,33,34,32,33,34,0,32,33,34,32,32,33,33,34,32,33,34,0,0,0,32,33,34,0,32,33,34,0,0,0,0,32,33,0,32,33,34,32,33,32,33,34,32,33,34,32,33,34,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,51,41,51,41,41,41,41,41,51,41,51,41,41,41,51,41,41,41,41,51,41,41,41,41,41,41,41,41,41,41,41,41,41,51,41,51,41,41,51,0,125,125,125,125,125,125,125,125,125,125,0,0,0,66,0,0,0,58,48,63,48,63,48,63,66,48,63,63,63,48,63,48,63,126,48,48,66,63,0,48,63,58,48,63,66,48,63,63,63,48,63,127,66,48,63,48,63,128,0,0,0,129,128,128,129,0,0,0,45,44,45,44,45,45,45,44,45,44,130,45,44,45,44,44,45,45,44,45,44,45,44,0,47,47,47,47,47,47,47,47,47,47,47,0,47,47,47,47,0,0,0,0,0,0,0,0,0,0,70,68,131,69,70,68,131,69,67,69,70,68,131,69,15,69,70,68,131,69,69,69,67,69,70,68,131,69,15,69,70,68,131,69,70,68,131,69,0,0,72,73,72,73,72,73,73,72,72,73,72,73,72,73,73,72,73,72,72,73,72,73,72,73,0,59,59,59,59,59,59,59,59,59,59,59,59,59,0,37,37,37,37,37,37,37,37,37,37,37,0,0,77,76,77,76,77,76,76,77,76,0,77,77,76,77,76,77,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[2,4],5],[[[3,[6,6,6]],4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,7],[1,8],[9,10],[[3,3],10],[7,11],[8,11],[10,11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,[[]],[[]],[[]],[14],[[]],[15,14],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,[[]],[[]],[[]],[16],[16,16],[[]],[[16,16],17],[[],16],[[16,16],18],[[16,4],5],[[]],[16],[[]],[[16,16],[[11,[17]]]],[[]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[20,[19]]],[[20,[19]]]],[21,21],[[[22,[19]]],[[22,[19]]]],[[[23,[19]]],[[23,[19]]]],[[]],[[]],[[]],[[]],[[[20,[24]],20],17],[[21,21],17],[[]],[[[20,[25]]]],[20],[22],[[[22,[25]]]],[[[23,[25]]]],[23],[[[20,[26]],20],18],[[21,21],18],[[[22,[26]],22],18],[[[23,[26]],23],18],[[[20,[6]],4],5],[[21,4],5],[[]],[[]],[[]],[[]],[[],11],[20,11],[[[20,[25]]],11],[[[22,[25]]],11],[22,11],[[[23,[25]]],11],[23,11],[[],11],[[[20,[25]]],11],[20,11],[22,11],[[[22,[25]]],11],[23,11],[[[23,[25]]],11],[[[20,[27]]]],[21],[[[22,[27]]]],[[[23,[27]]]],[[]],[[]],[[]],[[]],[20],[21],[22],[23],[[],18],[[]],[[[20,[25]]]],[20],[[[22,[25]]]],[22],[[[23,[25]]]],[23],[[],28],[[[20,[25]]],28],[20,28],[[[22,[25]]],28],[22,28],[23,28],[[[23,[25]]],28],0,[[[20,[29]],20],[[11,[17]]]],[[21,21],[[11,[17]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,[[],[[11,[17]]]],[[]],[[],11],0,[[],18],[[],18],0,[[],18],0,0,0,0,[[]],0,[[]],[[]],[[],11],[[]],[[]],[[],18],[[],12],[[],12],[[],13],0,0,[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[]],[[],11],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[],[[11,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[],11],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[],[[11,[17]]]],[[]],[[],11],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[]],[[]],[[]],[[]],[[],18],[[]],[[],12],[[],12],[[],13],0,[[]],[[]],[30,30],[[]],[[],30],[[30,4],5],[[]],[30,11],[[]],[[],30],[[]],[[],12],[[30,31]],[[],12],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[32,32],[33,33],[34,34],[[]],[[]],[[]],0,[[32,32],18],[[33,33],18],[[34,34],18],[[32,4],5],[[32,4],5],[[33,4],5],[[33,4],5],[[34,4],5],[[]],[[]],[[]],0,0,0,[32],[33],[34],0,[[]],[[]],[[]],0,0,0,0,[32,12],[33,12],0,[[]],[[]],[[]],[[],35],[[],35],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,0,[36],[36,37],[[]],[[]],[36,28],[36,32],[36,28],[[]],[[]],[36],[[36,37],38],[[36,32,18]],[36,[[12,[39]]]],[[36,37]],[[36,37]],[[],12],[[],12],[[],13],[36,40],0,0,[41],[[41,42],[[44,[43]]]],[[41,42],[[44,[45]]]],[[41,42]],[[41,46],[[49,[[48,[47]]]]]],[41,37],[41,32],[[41,49,49,42,42],32],[[41,49,49,42],32],[[41,49,49],32],[[41,49,42,42],32],[[41,49,42],32],[[41,[50,[49]],[50,[42]]],32],[[41,49],32],[[41,42],32],[[41,28],32],[[41,28,[50,[49]],[50,[42]]],32],[[41,46]],[[41,46],[[42,[[48,[47]]]]]],[[]],[[]],[[]],[[]],[[41,32],36],[41,28],[41,28],[[],41],[41],[[51,4],[[12,[52]]]],[[]],[[]],[41],[[41,53],[[49,[48]]]],[[]],[[]],[41,54],[41],[41,[[11,[55]]]],[[],41],[[[57,[56]],58],51],[56,41],[[41,18],18],[41,[[42,[48]]]],[41,59],[41,[[11,[60]]]],[41,[[11,[60]]]],[41,[[11,[61]]]],[41,[[11,[61]]]],[41,18],[41,18],[41,18],[41,[[12,[39]]]],[[],12],[[],12],[[],12],[[],12],[41],[[],13],[[],13],0,[42,[[44,[43]]]],[42,[[44,[45]]]],[42],[[49,49,42,42],32],[[49,49,42],32],[[49,49],32],[[49,42,42],32],[[49,42],32],[49,32],[42,32],0,0,0,0,0,0,0,[[],62],[48,62],[63,62],[[]],[[]],[[]],[[]],[[],64],[48,64],[63,64],[63,63],[[]],[[],48],[[],63],[[]],[[]],[[]],[[48,11],11],[[48,21],21],[[]],[[63,50],50],0,[[]],[[]],[[],18],[48,18],[63,18],[[]],[48],[63],[63,63],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,0,[[]],[[[11,[32]],[11,[32]],50]],[[]],0,0,0,[[]],[[]],[[]],[[]],[45,45],[[]],[[],45],[44],[[]],[[]],[[],18],[45,18],[44],[[]],[[]],[[59,32],44],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,[[]],[[]],[47,47],[[]],[65,47],[[47,47],18],[[47,4],5],[[]],[[]],0,[[]],[[],12],[[],12],[[],13],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[67,[66]]],64],[[[69,[68,66]]],64],[[]],[[]],[[]],[[]],[[[15,[66]]]],[[[69,[70,66]]]],[[]],[[]],[[]],[[]],[[],[[69,[71]]]],[[],[[69,[71]]]],[[[67,[66]]]],[[[69,[68,66]]]],[[],12],[[],12],[[],12],[[],12],[[[15,[66]]],12],[[[69,[70,66]]],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],0,0,[[]],[[]],[[]],[[]],[[72,72],72],[[73,[50,[72]]],72],[[],73],[72,72],[[]],[[]],[[]],[[]],[72,72],[[],73],[73],[72],[73,72],[[[72,[19]],28],[[50,[[72,[19]]]]]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[]],[[]],[59,59],[[]],[[]],[[]],[[59,32],40],[74,59],[[]],[[59,32],[[12,[75]]]],[[],12],[[],12],[[],13],0,[[]],[[]],[37,37],[[]],[[[37,[6]],4],5],[[]],[[]],[[]],[[],12],[[],12],[[],13],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[76,64],[[]],[[]],[[]],[77],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,0,0,0,0,[78],[78],[[]],[[]],[79],[56,[[12,[78,80]]]],[[],81],[[],65],[[]],[46],[46],[46],[46],[82],[82],[82],[82],[[]],[83],[83],[83],[83]],"p":[[3,"CrossJoinState"],[3,"BatchJoinState"],[3,"HalfJoinState"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"BatchJoin"],[3,"CrossJoin"],[6,"JoinState"],[3,"SymmetricHashJoin"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"PushHandoff"],[6,"SendCtx"],[3,"ClearDefault"],[4,"Ordering"],[15,"bool"],[8,"Clone"],[3,"Single"],[3,"Iter"],[3,"Array"],[3,"MaskedArray"],[8,"Ord"],[8,"Eq"],[8,"PartialEq"],[8,"Hash"],[15,"usize"],[8,"PartialOrd"],[3,"MonotonicMap"],[8,"FnOnce"],[3,"SubgraphId"],[3,"HandoffId"],[3,"StateId"],[3,"String"],[3,"Context"],[3,"StateHandle"],[3,"Box"],[3,"TryCurrentError"],[3,"Waker"],[3,"Hydroflow"],[6,"SendPort"],[3,"SyncSender"],[3,"Input"],[3,"Buffer"],[3,"TcpStream"],[3,"Message"],[3,"VecHandoff"],[6,"RecvPort"],[3,"Vec"],[3,"HandoffData"],[3,"Error"],[15,"u16"],[8,"Future"],[3,"HydroflowGraph"],[15,"str"],[4,"Cow"],[8,"HandoffMeta"],[3,"Reactor"],[3,"NonZeroUsize"],[15,"never"],[8,"Any"],[3,"TeeingHandoff"],[3,"RefMut"],[3,"Bytes"],[8,"Handoff"],[6,"RecvCtx"],[4,"RECV"],[3,"PortCtx"],[4,"SEND"],[8,"Polarity"],[3,"Operator"],[3,"Query"],[3,"UnboundedSender"],[3,"SendError"],[3,"Once"],[3,"SendOnce"],[4,"SocketAddr"],[3,"BytesMut"],[3,"Error"],[8,"Iterator"],[3,"UdpSocket"],[3,"UnixStream"],[8,"Clear"],[8,"Collection"],[8,"Debottom"],[8,"LatticeRepr"],[8,"Compare"],[8,"Convert"],[8,"Top"],[8,"Merge"],[3,"BottomRepr"],[3,"DomPair"],[3,"DomPairRepr"],[3,"MapUnion"],[3,"MapUnionRepr"],[3,"Max"],[3,"MaxRepr"],[3,"Min"],[3,"MinRepr"],[3,"Pair"],[3,"PairRepr"],[3,"SetUnion"],[3,"SetUnionRepr"],[3,"TopRepr"],[8,"Tag1"],[8,"Tag2"],[4,"HASH_SET"],[4,"HASH_MAP"],[4,"BTREE_SET"],[4,"BTREE_MAP"],[4,"VEC"],[4,"SINGLE"],[4,"OPTION"],[3,"ARRAY"],[3,"MASKED_ARRAY"],[8,"Props"],[3,"NonMonotonic"],[3,"Monotonic"],[3,"Consecutive"],[3,"Duplicates"],[3,"NoDuplicates"],[8,"PullSpec"],[8,"PushSpec"],[8,"GraphExt"],[8,"CanReceive"],[8,"TryCanReceive"],[8,"PortList"],[8,"PortListSplit"],[8,"Give"],[3,"Port"]]},\
"hydroflow_cli_integration":{"doc":"","t":"NEIDDIINNNDGGQNNNDQNEEEQQNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLKLLKLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bound","BoundConnection","Connected","ConnectedBidi","ConnectedDemux","ConnectedSink","ConnectedSource","Demux","Demux","Demux","DemuxDrain","DynSink","DynStream","Input","Merge","Merge","Merge","MergeSource","Output","Server","ServerBindConfig","ServerOrBound","ServerPort","Sink","Stream","TcpPort","TcpPort","TcpPort","UnixSocket","UnixSocket","UnixSocket","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connect","deserialize","deserialize","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_defn","from_defn","from_defn","into","into","into","into","into","into","into","into","into_sink","into_sink","into_sink","into_source","into_source","keys","poll_close","poll_flush","poll_next","poll_ready","serialize","serialize","sink_port","start_send","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll_next","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["hydroflow_cli_integration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Describes how to connect to a service which is listening …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,0,0,0,0,0,0,1,5,11,0,0,0,14,1,5,11,0,29,6,0,0,0,14,29,1,5,11,1,5,11,1,6,12,15,26,1,5,11,20,6,12,15,26,1,5,11,20,1,5,1,5,6,1,5,1,5,11,6,12,15,26,1,5,11,20,7,12,15,6,12,15,26,1,5,11,20,14,12,15,29,12,15,20,20,26,20,1,5,11,20,1,5,6,12,15,26,1,5,11,20,6,12,15,26,1,5,11,20,26,6,12,15,26,1,5,11,20],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[[3,[2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[5,5],[[]],[[]],[6,7],[[],[[8,[1]]]],[[],[[8,[5]]]],[[1,9],10],[[5,9],10],[[11,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,[[4,[[3,[2]]]]]],[6,[[4,[[3,[2]]]]]],[6,[[4,[[3,[2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,13],[[[15,[14]]]],[[]],[12,16],0,[[[4,[[20,[[0,[17,18,19]]]]]],21],[[22,[8]]]],[[[4,[[20,[[0,[17,18,19]]]]]],21],[[22,[8]]]],[[[4,[[26,[23,[0,[24,18,19,25]]]]]],21],[[22,[27]]]],[[[4,[[20,[[0,[17,18,19]]]]]],21],[[22,[8]]]],[1,8],[5,8],[11,5],[[[4,[[20,[[0,[17,18,19]]]]]]],8],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[4,21],[[22,[[27,[8]]]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28]],"p":[[4,"ServerBindConfig"],[8,"Future"],[3,"Box"],[3,"Pin"],[4,"ServerPort"],[4,"ServerOrBound"],[8,"Connected"],[4,"Result"],[3,"Formatter"],[6,"Result"],[4,"BoundConnection"],[3,"ConnectedBidi"],[6,"DynSink"],[8,"ConnectedSink"],[3,"ConnectedDemux"],[6,"DynStream"],[8,"Sink"],[8,"Send"],[8,"Sync"],[3,"DemuxDrain"],[3,"Context"],[4,"Poll"],[8,"Unpin"],[8,"Stream"],[8,"Sized"],[3,"MergeSource"],[4,"Option"],[3,"TypeId"],[8,"ConnectedSource"]]},\
"hydroflow_datalog":{"doc":"","t":"O","n":["datalog"],"q":["hydroflow_datalog"],"d":[""],"i":[0],"f":[0],"p":[]},\
"hydroflow_datalog_core":{"doc":"","t":"FF","n":["gen_hydroflow_graph","hydroflow_graph_to_program"],"q":["hydroflow_datalog_core",""],"d":["",""],"i":[0,0],"f":[[1,[[5,[2,[4,[3]]]]]],[[2,6],7]],"p":[[3,"Literal"],[3,"HydroflowGraph"],[3,"Diagnostic"],[3,"Vec"],[4,"Result"],[3,"TokenStream"],[4,"Stmt"]]},\
"hydroflow_internalmacro":{"doc":"","t":"XO","n":["operator_docgen","quote_to_str"],"q":["hydroflow_internalmacro",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"hydroflow_lang":{"doc":"","t":"AAAAADNNENNLLLLLLLLLLLLLLLLLLLLLMMLMLLLLLLLLLENDNDDDDNNDNEDNDNENNLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLMAMLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMMFFENNDERNRDDEENRRRINNNNNDGNLLLLLLLLLLLLLLLLLLLLLLLLLLLLKMLLLLMKLLLLFFLLLLLLLLLLLLLMMLMMFMMMLLLLLLLLMMLMMMMMMMFMLLMMMMMLMMKMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMMMMDEDDNNNNDDNNNENDDEDLMMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMMMLLLLLLLLLLLMLMLMMMLLLLLLLLLLLLMMMMLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLL","n":["diagnostic","graph","parse","pretty_span","union_find","Diagnostic","Error","Help","Level","Note","Warning","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","emit","eq","fmt","fmt","from","from","from","hash","into","into","is_error","is_error","level","message","partial_cmp","span","spanned","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Color","Comp","DiMulGraph","Elided","FlatGraphBuilder","GraphEdgeId","GraphNodeId","GraphSubgraphId","Handoff","Hoff","HydroflowGraph","Int","Node","OpInstGenerics","Operator","OperatorInstance","Path","PortIndexValue","Pull","Push","add_statement","arguments","as_code","as_error_message_string","assert_valid","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","combine","data","data","data","default","default","default","default","default","default","degree_in","degree_out","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","edge","edge","edge_ids","edge_ids","edge_ports","edges","edges","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hfcode","from_ported","generic_args","generics","get_operator_generics","graph_algorithms","hash","hash","hash","input_ports","insert_edge","insert_edge","insert_intermediate_node","insert_intermediate_vertex","insert_node","insert_node_op_inst","insert_node_op_insts_all","insert_subgraph","into","into","into","into","into","into","into","into","into","into","into","is_specified","max_stratum","mermaid_string_flat","new","new","new","node","node_color","node_color_map","node_degree_in","node_degree_out","node_ids","node_op_inst","node_predecessor_edges","node_predecessor_nodes","node_predecessors","node_subgraph","node_successor_edges","node_successor_nodes","node_successors","nodes","op_constraints","ops","output_ports","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_graph","persistence_args","predecessor_edges","predecessor_vertices","predecessors","remove_from_subgraph","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_subgraph_stratum","span","span","subgraph","subgraph_ids","subgraph_stratum","subgraphs","successor_edges","successor_vertices","successors","surface_syntax_string","to_dot","to_mermaid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_pretty_string","try_build","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_args","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","write_dot","write_graph","write_mermaid","write_mermaid_flat","write_surface_syntax","dst_span","src_span","scc_kosaraju","topo_sort","DelayType","DependsOnArgs","Fixed","FlowProperties","FlowPropertyVal","IDENTITY_WRITE_FN","No","OPERATORS","OperatorConstraints","OperatorWriteOutput","Persistence","PortListSpec","Preserve","RANGE_0","RANGE_1","RANGE_ANY","RangeTrait","Static","Stratum","Tick","Tick","Variadic","WriteContextArgs","WriteFn","Yes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","contains","context","default","default","default","deserialize","deterministic","end_bound","eq","eq","eq","eq","find_node_op_constraints","find_op_op_constraints","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hard_range_inn","hard_range_out","human_string","hydroflow","ident","identity_write_iterator_fn","inconsistency_tainted","input_delaytype_fn","inputs","into","into","into","into","into","into","into","into","is_external_input","is_pull","make_ident","monotonic","name","node_id","num_args","op_inst","op_name","op_span","operator_lookup","outputs","partial_cmp","partial_cmp","persistence_args","ports_inn","ports_out","properties","root","serialize","soft_range_inn","soft_range_out","start_bound","subgraph_id","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_args","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_fn","write_iterator","write_iterator_after","write_prologue","HfCode","HfStatement","IndexInt","Indexing","Int","Link","Name","Named","NamedHfStatement","Operator","Operator","Paren","Path","Pipeline","Pipeline","PipelineLink","PipelineParen","PortIndex","Ported","args","args","arrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bracket_token","clone","clone","clone","clone_into","clone_into","clone_into","cmp","eq","equals","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","index","inn","inner","into","into","into","into","into","into","into","into","into","into","into","lhs","name","name","name_string","out","paren_token","paren_token","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","partial_cmp","path","pipeline","pipeline","rhs","span","span","span","span","span","span","span","span","span","span","span","span","statements","to_owned","to_owned","to_owned","to_pretty_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_arguments","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","PrettyRowCol","PrettySpan","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","UnionFind","borrow","borrow_mut","clone","clone_into","default","find","from","into","new","same_set","to_owned","try_from","try_into","type_id","union","with_capacity"],"q":["hydroflow_lang","","","","","hydroflow_lang::diagnostic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::graphhydroflow_lang::graph::Node","","hydroflow_lang::graph::graph_algorithms","","hydroflow_lang::graph::ops","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hydroflow_lang::parsehydroflow_lang::pretty_span","","","","","","","","","","","","","","","","","","","","hydroflow_lang::union_find","","","","","","","","","","","","","","","",""],"d":["","Graph representation stages for Hydroflow graphs.","AST for surface syntax, modelled on <code>syn</code>’s ASTs.","","","","An error.","A help message.","","A note.","A warning.","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Computation (yellow)","A directed multigraph where an vertex’s inbound and …","","","ID to identify an edge.","ID to identify a node (operator or handoff) in …","ID to identify a subgraph in <code>HydroflowGraph</code>.","","Handoff (grey) – not a color for operators, inserted …","A graph representing a hydroflow dataflow graph (with or …","","","","","","","Helper struct for <code>PortIndex</code> which keeps span information …","Pull (green)","Push (blue)","Add a single <code>HfStatement</code> line to this <code>HydroflowGraph</code>.","Arguments provided by the user into the operator as …","Emit this <code>HydroflowGraph</code> as runnable Rust source code …","","Assert that <code>self</code> is in a consistent state, for debugging. …","","","","","","","","","","","","","","","","","","","","","","","Build into an unpartitioned <code>HydroflowGraph</code>.","","","","","","","","","","","","","","","","","","","","","","","","Return <code>Err(self)</code> if there is a conflict.","","","","","","","","","","The degree (number of edges/vertices) going into <code>v</code>, i.e. …","The degree (number of edges/vertices) coming out of <code>v</code>, …","","","","","","","","","Get the source and destination vertex IDs for the given …","Get the <code>src</code> and <code>dst</code> for an edge: …","Return an iterator over all edge IDs <code>E</code>.","Iterator of all edge IDs <code>GraphEdgeId</code>.","Get the source and destination ports for an edge: …","Return an iterator over all edges in form <code>(E, (V, V))</code>.","Iterator over all edges: …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Operator generic (type or lifetime) arguments.","Generic arguments.","","","","","","Port values used as this operator’s input.","Creates an edge going from <code>src</code> to <code>dst</code> and returns the edge …","Insert an edge between nodes thru the given ports.","Inserts a node between two existing nodes connected by the …","For an <code>edge</code> from <code>A --&gt; B</code>, insert a new vertex <code>V</code> along that …","Insert a node, assigning the given varname.","Insert an operator instance for the given node. Panics if …","Assign all operator instances if not set. Write diagnostic …","Create a subgraph consisting of <code>node_ids</code>. Returns an error …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the the stratum number of the largest (latest) …","Convert into a mermaid graph. Ignores subgraphs.","Creates an empty <code>DiMulGraph</code>.","Create a new empty graph builder.","Create a new empty <code>HydroflowGraph</code>.","Get a node with its operator instance (if applicable).","Determine op color based on in and out degree. If linear …","Color mode (pull vs. push, handoff vs. comp) for nodes. …","Degree into a node, i.e. the number of predecessors.","Degree out of a node, i.e. the number of successors.","Iterator of node IDs <code>GraphNodeId</code>.","Get the <code>OperatorInstance</code> for a given node. Node must be an …","Predecessor edges, iterator of <code>GraphEdgeId</code> of incoming …","Predecessor edges, iterator of <code>GraphNodeId</code>.","Predecessors, iterator of <code>(GraphEdgeId, GraphNodeId)</code> of …","Get subgraph for node.","Successor edges, iterator of <code>GraphEdgeId</code> of outgoing edges.","Successor nodes, iterator of <code>GraphNodeId</code>.","Successors, iterator of <code>(GraphEdgeId, GraphNodeId)</code> of …","Iterator over <code>(GraphNodeId, &amp;Node)</code> pairs.","Name of the operator (will match <code>OperatorConstraints::name</code>…","","Port values used as this operator’s output.","","","","","","","Lifetime persistence arguments. Corresponds to a prefix of …","Return an iterator of all edge IDs going into <code>v</code>.","Return an iterator of all predecessor vertex IDs of <code>v</code>.","Return an iterator of all predecessor edge IDs <em>and</em> vertex …","Removes a node from its subgraph. Returns true if the node …","","","","","","","","","Set subgraph’s stratum number, returning the old value …","","","Nodes belonging to the given subgraph.","Iterator over all subgraph IDs.","Gets the stratum nubmer of the subgraph.","Iterator over all subgraphs, ID and members: …","Return an iterator of all edge IDs coming out of <code>v</code>.","Return an iterator of all successor vertex IDs of <code>v</code>.","Return an iterator of all successor edge IDs <em>and</em> vertex …","Convert back into surface syntax.","Writes this graph as DOT (graphviz) into a string.","Writes this graph as mermaid into a string.","","","","","","","","","","","Build into an unpartitioned <code>HydroflowGraph</code>, returning a …","","","","","","","","","","","","","","","","","","","","","","","Type persistence arguments. Corersponds to a (suffix) of …","","","","","","","","","","","","Creates a <code>DiMulGraph</code> with pre-allocated memory for <code>capacity</code>…","Writes this graph as DOT (graphviz) into the given <code>Write</code>.","Write out this <code>HydroflowGraph</code> using the given <code>GraphWrite</code>. …","Writes this graph as mermaid into the given <code>Write</code>.","Convert into a mermaid graph. Ignores subgraphs.","Convert back into surface syntax.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>context</code> ident, the name of the provided …","","","","","Is the flow deterministic.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Input argument range required to not show an error.","Output argument range required to not show an error.","","<code>df</code> ident, the name of the …","Ident the iterator or pullerator should be assigned to.","","Has inconsistency been introduced.","Determines if this input must be preceeded by a stratum …","Input operator idents (used for pull).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If this operator receives external inputs and therefore …","If a pull iterator (true) or pusherator (false) should be …","","Is the flow monotonic.","Operator’s name.","Node ID identifying this operator in the flat or …","Number of arguments i.e. <code>operator(a, b, c)</code> has <code>num_args = 3</code>…","Operator instance arguments object.","Operator name.","The source span of this operator.","","Output operator idents (used for push).","","","How many persistence lifetime arguments can be provided.","What named or numbered input ports to expect?","What named or numbered output ports to expect?","Monotonicity preservation properties, for analysis.","<code>hydroflow</code> crate name for <code>use #root::something</code>.","","Input argument range required to not show a warning.","Output argument range required to not show an warning.","","Subgraph ID in which this operator is contained.","","","","","","","","","","","","","","","","","","","","","","How many generic type arguments can be provided.","","","","","","","","","Emit code in multiple locations. See <code>OperatorWriteOutput</code>.","Iterator (or pusherator) code inside the subgraphs. The …","Code which runs after iterators have been run. Mainly for …","Code which runs once outside the subgraph to set up any …","","","","","","","","","","","","","","","","","","Port can either be an int or a name (path).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Output the operator as a formatted string using …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper struct which displays the span as <code>row:col</code> for human …","Helper struct which displays the span as <code>path:row:col</code> for …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,0,1,1,1,2,1,2,1,2,1,2,1,2,1,1,2,1,2,2,1,1,2,1,2,2,2,1,2,2,1,2,1,2,1,2,1,2,0,26,0,18,0,0,0,0,23,26,0,18,0,0,23,0,18,0,26,26,14,24,16,18,19,19,14,16,20,21,22,23,24,25,26,18,19,14,16,20,21,22,23,24,25,26,18,14,19,20,21,22,23,24,25,26,18,19,20,21,22,23,24,25,26,18,20,21,22,26,18,18,20,21,22,19,14,16,20,21,22,19,19,19,16,20,21,22,23,26,18,19,16,19,16,16,19,16,20,21,22,26,18,19,14,16,20,21,22,23,24,25,26,18,19,19,14,14,16,20,20,21,21,22,22,23,24,25,26,18,18,14,18,25,24,0,0,20,21,22,24,19,16,16,19,16,16,16,16,19,14,16,20,21,22,23,24,25,26,18,18,16,16,19,14,16,16,0,16,16,16,16,16,16,16,16,16,16,16,16,16,24,0,24,20,21,22,26,18,0,25,19,19,19,16,19,16,20,21,22,23,26,18,16,23,18,16,16,16,16,19,19,19,16,16,16,19,20,21,22,23,24,25,26,18,23,14,19,14,16,20,21,22,23,24,25,26,18,19,14,16,20,21,22,23,24,25,26,18,25,19,14,16,20,21,22,23,24,25,26,18,19,16,16,16,16,16,74,74,0,0,0,52,75,0,0,0,52,0,0,0,0,0,52,0,0,0,0,55,51,51,55,75,0,0,52,75,58,51,52,53,56,54,55,75,58,51,52,53,56,54,55,51,52,53,54,55,51,52,53,54,55,51,55,76,54,52,53,56,55,53,76,51,52,53,55,0,0,58,51,52,53,55,75,58,51,52,53,56,54,55,58,58,76,54,54,0,53,58,54,75,58,51,52,53,56,54,55,58,54,54,53,58,54,58,54,54,54,0,54,51,55,58,58,58,58,54,55,58,58,76,54,51,52,53,54,55,75,58,51,52,53,56,54,55,75,58,51,52,53,56,54,55,58,75,58,51,52,53,56,54,55,58,56,56,56,0,0,0,0,37,67,67,15,0,0,67,67,37,0,15,0,0,0,0,40,40,69,36,15,66,67,38,68,69,70,37,40,62,36,15,66,67,38,68,69,70,37,40,62,70,37,40,62,37,40,62,62,62,66,37,62,36,15,66,67,38,68,69,70,37,40,62,62,70,38,38,36,15,66,67,38,68,69,70,37,40,62,69,40,66,40,38,68,40,36,15,66,67,38,68,69,70,37,40,62,62,40,66,68,69,36,15,66,67,38,68,69,70,37,40,62,62,36,37,40,62,40,36,15,66,67,38,68,69,70,37,40,62,36,15,66,67,38,68,69,70,37,40,62,36,15,66,67,38,68,69,70,37,40,62,40,36,15,66,67,38,68,69,70,37,40,62,62,0,0,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,71,72,0,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[2],[[1,1],4],[[1,5],6],[[2,5],6],[[]],[7,2],[[]],[1],[[]],[[]],[1,4],[2,4],0,0,[[1,1],[[8,[3]]]],0,[[9,1,[11,[10]]],2],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,15]],0,[[16,17,4],17],[18,10],[19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,1],[[12,[16,16]]]],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[18,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[20,20],3],[[21,21],3],[[22,22],3],[[26,26],3],[[18,18],3],[[18,18],[[12,[18,18]]]],[20,27],[21,27],[22,27],[[],19],[[],14],[[],16],[[],20],[[],21],[[],22],[19,28],[19,28],[[],[[12,[19]]]],[[],[[12,[16]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[26]]]],[[],[[12,[18]]]],[19,8],[[16,21]],[19,29],[16,[[29,[21]]]],[[16,21]],[19,[[0,[30,31,32,33,34]]]],[16,[[0,[30,31,32,33,34]]]],[[20,20],4],[[21,21],4],[[22,22],4],[[26,26],4],[[18,18],4],[[19,5],6],[[14,5],6],[[16,5],6],[[20,5],6],[[21,5],6],[[22,5],6],[[23,5],6],[[24,5],6],[[25,5],6],[[26,5],6],[[18,5],6],[35,19],[[]],[36,14],[[]],[[]],[27,20],[[]],[[]],[27,21],[[]],[27,22],[[]],[[]],[[]],[[]],[37,18],[[]],[36,14],[38],0,0,[[39,40],25],0,[20],[21],[22],0,[19],[[16,20,18,20,18],21],[[16,21,23]],[19,8],[[16,23,[8,[41]]],20],[[16,20,24]],[[16,39]],[[16,[39,[20]]],[[12,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,4],[16,[[8,[28]]]],[16,10],[[],19],[[],14],[[],16],[[16,20],23],[[4,28,28],[[8,[26]]]],[16,[[42,[20,26]]]],[[16,20],28],[[16,20],28],[16,[[29,[20,23]]]],[[16,20],[[8,[24]]]],[[16,20],[[0,[30,43,31,32,33,34]]]],[[16,20],[[0,[30,43,31,32,33,34]]]],[[16,20],[[0,[30,43,31,32,33,34]]]],[[16,20],[[8,[22]]]],[[16,20],[[0,[30,43,31,32,33,34]]]],[[16,20],[[0,[30,43,31,32,33,34]]]],[[16,20],[[0,[30,43,31,32,33,34]]]],[16,[[44,[20,23]]]],0,0,0,[[20,20],[[8,[3]]]],[[21,21],[[8,[3]]]],[[22,22],[[8,[3]]]],[[26,26],[[8,[3]]]],[[18,18],[[8,[3]]]],[16,[[12,[16,2]]]],0,[19,[[46,[45]]]],[19,[[0,[30,43,31,32,33,34]]]],[19,[[0,[30,43,31,32,33,34]]]],[[16,20],4],[19,12],[16,12],[20,12],[21,12],[22,12],[23,12],[26,12],[18,12],[[16,22,28],[[8,[28]]]],[23,9],[18,9],[[16,22],39],[16,[[29,[22,[39,[20]]]]]],[[16,22],[[8,[28]]]],[16,[[44,[22,[39,[20]]]]]],[19,[[46,[45]]]],[19,[[0,[30,43,31,32,33,34]]]],[19,[[0,[30,43,31,32,33,34]]]],[16,10],[16,10],[16,10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,[[48,[47]]]],[14],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[28,19],[[16,49],6],[16,12],[[16,49],6],[16,6],[16,6],0,0,[[],50],[[],39],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,51],[52,52],[53,53],[54,54],[55,55],[[]],[[]],[[]],[[]],[[]],[[51,51],3],[[55,55],3],[[],4],0,[[],52],[[],53],[[],56],[[],[[12,[55]]]],0,[[],57],[[51,51],4],[[52,52],4],[[53,53],4],[[55,55],4],[23,[[8,[58]]]],[40,[[8,[58]]]],[[58,5],6],[[51,5],6],[[52,5],6],[[53,5],6],[[55,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],10],0,0,[54,17],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[54,[59,[47]]],41],0,0,0,0,0,0,0,[[],60],0,[[51,51],[[8,[3]]]],[[55,55],[[8,[3]]]],0,0,0,0,0,[55,12],0,0,[[],57],0,[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[40,61],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[37,37],[40,40],[62,62],[[]],[[]],[[]],[[62,62],3],[[62,62],4],0,[[37,5],6],[[62,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[40,63],0,[40,10],0,0,0,[64,[[65,[36]]]],[64,[[65,[15]]]],[64,[[65,[66]]]],[64,[[65,[67]]]],[64,[[65,[38]]]],[64,[[65,[68]]]],[64,[[65,[69]]]],[64,[[65,[70]]]],[64,[[65,[37]]]],[64,[[65,[40]]]],[64,[[65,[62]]]],[[62,62],[[8,[3]]]],0,0,0,0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[]],[[]],[[]],[40,10],[[36,17]],[[15,17]],[[66,17]],[[67,17]],[[38,17]],[[68,17]],[[69,17]],[[70,17]],[[37,17]],[[40,17]],[[62,17]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[40,[[8,[61]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[[]],[[]],[[]],[[]],[[71,5],6],[[72,5],6],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,[[]],[[]],[73,73],[[]],[[],73],[73],[[]],[[]],[[],73],[73,4],[[]],[[],12],[[],12],[[],13],[73],[28,73]],"p":[[4,"Level"],[3,"Diagnostic"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Option"],[3,"Span"],[3,"String"],[8,"Into"],[4,"Result"],[3,"TypeId"],[3,"FlatGraphBuilder"],[4,"HfStatement"],[3,"HydroflowGraph"],[3,"TokenStream"],[4,"PortIndexValue"],[3,"DiMulGraph"],[3,"GraphNodeId"],[3,"GraphEdgeId"],[3,"GraphSubgraphId"],[4,"Node"],[3,"OperatorInstance"],[3,"OpInstGenerics"],[4,"Color"],[3,"KeyData"],[15,"usize"],[3,"Keys"],[8,"Iterator"],[8,"ExactSizeIterator"],[8,"FusedIterator"],[8,"Clone"],[8,"Debug"],[3,"SlotMap"],[3,"HfCode"],[4,"PortIndex"],[3,"Ported"],[3,"Vec"],[3,"Operator"],[3,"Ident"],[3,"SparseSecondaryMap"],[8,"DoubleEndedIterator"],[3,"Iter"],[3,"Iter"],[3,"Copied"],[15,"str"],[4,"Cow"],[8,"Write"],[3,"BTreeMap"],[4,"DelayType"],[4,"FlowPropertyVal"],[3,"FlowProperties"],[3,"WriteContextArgs"],[4,"Persistence"],[3,"OperatorWriteOutput"],[4,"Bound"],[3,"OperatorConstraints"],[8,"AsRef"],[3,"HashMap"],[3,"Punctuated"],[3,"IndexInt"],[3,"Path"],[6,"ParseStream"],[6,"Result"],[3,"NamedHfStatement"],[4,"Pipeline"],[3,"PipelineParen"],[3,"PipelineLink"],[3,"Indexing"],[3,"PrettySpan"],[3,"PrettyRowCol"],[3,"UnionFind"],[13,"Handoff"],[4,"PortListSpec"],[8,"RangeTrait"]]},\
"hydroflow_macro":{"doc":"","t":"OO","n":["hydroflow_parser","hydroflow_syntax"],"q":["hydroflow_macro",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"multiplatform_test":{"doc":"","t":"X","n":["multiplatform_test"],"q":["multiplatform_test"],"d":[""],"i":[0],"f":[0],"p":[]},\
"pusherator":{"doc":"Pusherator generics and argument order conventions:","t":"DQQIQIILLLALALAAALLKALLALLAALKLALALLLLALDILLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLL","n":["InputBuild","Item","ItemOut","IteratorToPusherator","Output","Pusherator","PusheratorBuild","borrow","borrow_mut","default","demux","demux","filter","filter","filter_map","flatten","for_each","for_each","from","give","inspect","inspect","into","map","map","new","partition","pivot","pull_to_push","push_to","push_to","switch","switch","tee","tee","try_from","try_into","type_id","unzip","unzip","Demux","PusheratorList","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","Filter","FilterBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","FilterMap","FilterMapBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Flatten","FlattenBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","ForEach","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","Inspect","InspectBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Map","MapBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Partition","PartitionBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Pivot","PivotBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new","push_to","run","step","try_from","try_from","try_into","try_into","type_id","type_id","Switch","SwitchBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Tee","TeeBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Unzip","UnzipBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["pusherator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pusherator::demux","","","","","","","","","","","pusherator::filter","","","","","","","","","","","","","","","","","","","","pusherator::filter_map","","","","","","","","","","","","","","","","","","","","pusherator::flatten","","","","","","","","","","","","","","","","","","","","pusherator::for_each","","","","","","","","","","pusherator::inspect","","","","","","","","","","","","","","","","","","","","pusherator::map","","","","","","","","","","","","","","","","","","","","pusherator::partition","","","","","","","","","","","","","","","","","","","","pusherator::pivot","","","","","","","","","","","","","","","","","","","","","pusherator::switch","","","","","","","","","","","","","","","","","","","","pusherator::tee","","","","","","","","","","","","","","","","","","","","pusherator::unzip","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A variadic list of Pusherators.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,27,28,0,28,0,0,1,1,1,0,28,0,28,0,0,0,28,1,27,0,28,1,0,28,1,0,0,29,28,1,0,28,0,28,1,1,1,0,28,0,0,11,11,11,11,11,11,11,11,11,0,0,12,2,12,2,12,2,12,12,2,12,2,2,12,2,12,2,12,2,0,0,13,14,13,14,13,14,13,13,14,13,14,14,13,14,13,14,13,14,0,0,15,16,15,16,15,16,15,15,16,15,16,16,15,16,15,16,15,16,0,17,17,17,17,17,17,17,17,17,0,0,18,3,18,3,18,3,18,18,3,18,3,3,18,3,18,3,18,3,0,0,19,4,19,4,19,4,19,19,4,19,4,4,19,4,19,4,19,4,0,0,20,21,20,21,20,21,20,20,21,20,21,21,20,21,20,21,20,21,0,0,22,5,22,5,22,5,22,5,22,5,5,22,22,22,5,22,5,22,5,0,0,24,6,24,6,24,6,24,24,6,24,6,6,24,6,24,6,24,6,0,0,25,7,25,7,25,7,25,25,7,25,7,7,25,7,25,7,25,7,0,0,26,10,26,10,26,10,26,26,10,26,10,10,26,10,26,10,26,10],"f":[0,0,0,0,0,0,0,[[]],[[]],[[],1],0,[[]],0,[[],2],0,0,0,[[]],[[]],[[]],0,[[],3],[[]],0,[[],4],[[],1],0,0,[[],5],[[]],[1],0,[[],6],0,[[],7],[[],8],[[],8],[[],9],0,[[],10],0,0,[[]],[[]],[[]],[11],[[]],[[],11],[[],8],[[],8],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[12],[[]],[[]],[[],12],[[],2],[2],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[13],[[]],[[]],[[],13],[[],14],[14],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15],[[]],[[]],[[],15],[[],16],[16],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,[[]],[[]],[[]],[17],[[]],[[],17],[[],8],[[],8],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[],18],[[],3],[3],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[19],[[]],[[]],[[],19],[[],4],[4],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[20],[[]],[[]],[[],20],[[],21],[21],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],5],[5],[22],[22,23],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[24],[[]],[[]],[[],24],[[],6],[6],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[25],[[]],[[]],[[],25],[[],7],[7],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[26],[[]],[[]],[[],26],[[],10],[10],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[3,"InputBuild"],[3,"FilterBuild"],[3,"InspectBuild"],[3,"MapBuild"],[3,"PivotBuild"],[3,"SwitchBuild"],[3,"TeeBuild"],[4,"Result"],[3,"TypeId"],[3,"UnzipBuild"],[3,"Demux"],[3,"Filter"],[3,"FilterMap"],[3,"FilterMapBuild"],[3,"Flatten"],[3,"FlattenBuild"],[3,"ForEach"],[3,"Inspect"],[3,"Map"],[3,"Partition"],[3,"PartitionBuild"],[3,"Pivot"],[15,"bool"],[3,"Switch"],[3,"Tee"],[3,"Unzip"],[8,"Pusherator"],[8,"PusheratorBuild"],[8,"IteratorToPusherator"]]},\
"relalg":{"doc":"","t":"NNENNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bool","ColRef","Datum","Eq","Int","Literal","Plus","ScalarExpr","String","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","eval","fmt","fmt","from","from","hash","hash","into","into","is_true","span","to_owned","to_owned","to_tokens","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["relalg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[1,2,0,2,1,2,2,0,1,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[2,1],[[1,4],5],[[2,4],5],[[]],[[]],[1],[2],[[]],[[]],[1,3],[[],6],[[]],[[]],[[2,7]],[[],8],[[],8],[[],8],[[],8],[[],9],[[],9]],"p":[[4,"Datum"],[4,"ScalarExpr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Span"],[3,"TokenStream"],[4,"Result"],[3,"TypeId"]]},\
"variadics":{"doc":"Crate for macro-free variadic tuple metaprogramming.","t":"IQIIQIKKKOOOO","n":["Extend","Extended","Split","SplitPrefix","Suffix","Variadic","extend","split","split","var_args","var_expr","var_type","variadic_trait"],"q":["variadics","","","","","","","","","","","",""],"d":["","","","","","","","","","Macro for pattern-matching with variadic tuples. This is …","Macro creating a variadic tuple value from a list of …","Macro creating a variadic tuple type from a list of types.","This macro generates a basic variadic trait where each …"],"i":[0,1,0,0,2,0,1,2,3,0,0,0,0],"f":[0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0],"p":[[8,"Extend"],[8,"SplitPrefix"],[8,"Split"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
