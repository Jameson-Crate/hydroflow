var searchIndex = JSON.parse('{\
"hydro":{"doc":"","t":"DDDDDLFLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLECNCNNCIGECNNIINNCNNDDDEINNNLKKLLLLLLLLLLLLKLLKKALKALLKLLKLLLLLLALAKLLLLLLKKAAKKKKKAKKKKKKKAMMMLLLLLLLLLLLLLLLLLLLALLLLLLKDDLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLDLLLLLLLMLMMLLLLLDDDLLLLLLLLLLMMLLLLLLMMMLLLLLMMMLLLMMLMLLLLLLLLLLLLLLLLLLMLLLDLLLLLLLLLLALLLLLLLLLNNDNNNDIIINNNNDGEENNDNLLKLLLLLLLLLLLLLLLLLLLMLLLLLLLKLKLLLKLLLKLLLLLLLLLKLLLMMKLLLKLLLLKLLLMMMMKLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLFLLLMLLLLLLLLLLLLENNNNEDNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKKKKHDDDDDDDLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLMMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLF","n":["AnyhowError","AnyhowWrapper","Deployment","Host","Service","__clone_box","_core","arguments","arguments","arguments","arguments","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","core","deref","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","fmt","fmt","from","from","from","from","from","from_borrowed_ptr_or_opt","from_owned_ptr_or_opt","into","into","into","into","into","into_py","into_py","into_py","into_py","into_py","items_iter","items_iter","items_iter","items_iter","lazy_type_object","lazy_type_object","lazy_type_object","lazy_type_object","new_err","provide","source","to_object","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_unchecked","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_object_raw","type_object_raw","type_object_raw","type_object_raw","type_object_raw","underlying","vzip","vzip","vzip","vzip","vzip","wrap","wrap","wrap","wrap","ClientStrategy","CustomService","Demux","Deployment","ExternalTcpPort","ForwardedTcpPort","GCPComputeEngineHost","Host","HostStrategyGetter","HostTargetType","HydroflowCrate","InternalTcpPort","InternalTcpPort","LaunchedBinary","LaunchedHost","Linux","Local","LocalhostHost","Merge","Null","ResourceBatch","ResourcePool","ResourceResult","ServerStrategy","Service","Tagged","UnixSocket","UnixSocket","__clone_box","as_any","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_connect_to","clone","clone_into","collect_resources","collect_resources","custom_service","default","deploy","deployment","eq","equivalent","exit_code","fmt","fmt","forward_port","from","from","from","from","from","from","gcp","hash","hydroflow_crate","id","into","into","into","into","into","into","launch_binary","launched","localhost","progress","provision","ready","request_custom_binary","request_port","server_config","ssh","start","stderr","stdin","stdout","stop","strategy_as_server","target_type","terraform","terraform","terraform","terraform","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","util","vzip","vzip","vzip","vzip","vzip","vzip","wait","CustomClientPort","CustomService","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","collect_resources","deploy","from","from","host","instantiate","instantiate_reverse","into","into","new","new","on","ready","record_server_config","record_server_strategy","server","server_port","source_path","start","stop","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Deployment","add_host","add_service","borrow","borrow_mut","default","deploy","from","hosts","into","resource_pool","services","start","try_from","try_into","type_id","vzip","GCPComputeEngineHost","GCPNetwork","LaunchedComputeEngine","as_any","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","can_connect_to","collect_resources","existing_vpc","external_ip","fmt","forward_port","from","from","from","id","id","image","internal_ip","into","into","into","launch_binary","launched","launched","machine_type","network","new","new","open_ssh_session","project","project","provision","region","request_custom_binary","request_port","resource_result","server_config","server_config","ssh_key_path","ssh_user","strategy_as_server","target_type","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","user","vzip","vzip","vzip","HydroflowCrate","add_connection","borrow","borrow_mut","collect_resources","deploy","exit_code","from","get_port","into","new","ports","ready","start","stderr","stdout","stop","try_from","try_into","type_id","vzip","Demux","DemuxSelect","DemuxSink","Direct","Direct","Forwarded","HydroflowPortConfig","HydroflowServer","HydroflowSink","HydroflowSource","Merge","MergeSelect","Null","Null","NullSourceSink","ReverseSinkInstantiator","ServerConfig","SourcePath","Tagged","Tagged","TaggedSource","TaggedUnwrap","__clone_box","__clone_box","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","demux","from","from","from","from","from","from","from_strategy","get_port","get_port","host","host","host","host","instantiate","instantiate","instantiate","instantiate","instantiate_reverse","instantiate_reverse","instantiate_reverse","instantiate_reverse","into","into","into","into","into","into","launched_host","launched_host","load_instantiated","merge","merge","port","record_server_config","record_server_config","record_server_config","record_server_config","record_server_strategy","record_server_strategy","record_server_strategy","record_server_strategy","send_to","server","server","server","server","service","service_host","service_server_defns","source","source_path","source_path","source_path","source_path","tag","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","wrap_reverse_server_config","wrap_reverse_server_config","LocalhostHost","as_any","as_any_mut","borrow","borrow_mut","can_connect_to","client_only","collect_resources","create_broadcast","fmt","from","id","id","into","launched","new","provision","request_custom_binary","request_port","strategy_as_server","target_type","try_from","try_into","type_id","vzip","BarTree","Finished","Finished","Group","Leaf","LeafStatus","ProgressTracker","Queued","Root","Started","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","end_task","eq","equivalent","fmt","fmt","from","from","from","into","into","into","leaf","println","rich_leaf","start_task","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","with_group","LaunchedSSHHost","open_ssh_session","resource_result","server_config","ssh_user","TERRAFORM_ALPHABET","TerraformBatch","TerraformConfig","TerraformOutput","TerraformPool","TerraformProvider","TerraformResult","TerraformResultOutput","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","data","default","default","deployment_folder","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","output","outputs","provision","required_providers","resource","serialize","serialize","serialize","serialize","serialize","source","terraform","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","async_retry"],"q":[[0,"hydro"],[103,"hydro::core"],[225,"hydro::core::custom_service"],[260,"hydro::core::deployment"],[277,"hydro::core::gcp"],[338,"hydro::core::hydroflow_crate"],[359,"hydro::core::hydroflow_crate::ports"],[487,"hydro::core::localhost"],[512,"hydro::core::progress"],[560,"hydro::core::ssh"],[565,"hydro::core::terraform"],[656,"hydro::core::util"]],"d":["","","","","","","","","","","","Gets the underlying FFI pointer, returns a borrowed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Creates a new <code>PyErr</code> of this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Like BindType, but includes metadata for determining …","","","","","","","","","","","","","","","","","","","","","","","Types of connections that a host can make to another host.","","","","","","Returns a reference to the host as a trait object.","Returns a reference to the host as a trait object.","","","","","","","","","","","","","Determines whether this host can connect to another host …","","","Makes requests for physical resources (servers) that this …","Makes requests for physical resources server ports that …","","","Connects to the acquired resources and prepares the …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","An identifier for this host, which is unique within a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Connects to the acquired resources and prepares the host …","Launches the service, which should start listening for …","Configures the host to support copying and running a …","","Given a pre-selected network type, computes concrete …","","Starts the service by having it connect to other services …","","","","Stops the service by having it disconnect from other …","Identifies a network type that this host can use for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an unknown, third-party service that is not …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","A demux that will be used at runtime to listen to many …","The other side of a demux, with a port to extract the …","","","","","","","","","A merge that will be used at runtime to combine many …","The other side of a merge, with a port to extract the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Instantiate the sink as the source host connecting to the …","","","","Instantiate the sink, but as the sink host connecting to …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of resources which may need to be cleaned up.","","","","","","","","","","","","","","","","","","","","","<code>None</code> if no deployment was performed","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,9,0,9,12,13,14,7,7,7,9,12,13,14,7,9,12,13,14,9,9,0,7,7,9,9,9,12,12,13,13,14,14,7,7,7,9,12,13,14,7,7,7,9,12,13,14,7,9,12,13,14,9,12,13,14,9,12,13,14,7,7,7,7,9,7,7,7,9,12,13,14,7,7,7,9,12,13,14,7,9,12,13,14,7,9,12,13,14,9,7,9,12,13,14,9,12,13,14,0,0,48,0,48,32,0,0,0,0,0,48,32,0,0,34,34,0,48,48,0,0,0,0,0,48,48,32,34,50,50,35,48,32,36,37,34,35,48,32,36,37,34,50,34,34,50,65,0,36,65,0,34,34,98,37,34,47,35,48,32,36,37,34,0,34,0,50,35,48,32,36,37,34,47,50,0,0,50,65,50,50,47,0,65,98,98,98,65,50,50,0,35,36,37,34,35,48,32,36,37,34,35,48,32,36,37,34,35,48,32,36,37,34,0,35,48,32,36,37,34,98,0,0,52,53,52,53,52,53,53,53,52,52,52,52,53,52,53,52,52,53,52,52,52,52,52,53,53,53,52,53,52,53,52,53,52,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,0,66,66,69,66,67,69,66,67,66,66,67,69,67,69,69,66,67,66,66,66,69,69,66,67,69,66,66,66,66,66,67,69,66,67,66,66,66,66,69,69,69,69,69,66,66,69,66,67,69,66,67,69,66,67,66,69,66,67,0,72,72,72,72,72,72,72,72,72,72,0,72,72,72,72,72,72,72,72,72,62,62,0,55,62,62,0,0,0,0,62,62,55,62,0,0,0,0,55,62,0,62,75,62,73,77,78,75,79,77,78,55,75,62,79,77,78,55,75,62,75,62,75,62,78,79,77,78,55,75,62,62,57,75,99,79,77,75,73,77,78,75,73,77,78,75,79,77,78,55,75,62,57,75,62,75,75,75,99,79,77,75,99,79,77,75,99,99,79,77,75,75,75,75,79,99,79,77,75,79,75,62,79,77,78,55,75,62,79,77,78,55,75,62,79,77,78,55,75,62,79,77,78,55,75,62,99,79,0,81,81,81,81,81,81,81,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,85,87,87,87,0,0,85,87,85,85,86,85,87,86,85,87,85,85,86,85,85,85,87,86,85,87,86,85,87,86,86,86,86,85,86,85,87,86,85,87,86,85,87,86,85,87,86,0,100,100,100,100,0,0,0,0,0,0,0,0,88,89,91,92,93,95,94,88,89,91,92,93,95,94,89,88,89,95,89,91,92,93,94,88,95,93,95,88,89,91,92,93,95,94,88,89,91,92,93,95,94,89,95,89,91,89,89,91,92,93,94,92,89,88,89,91,92,93,95,94,88,89,91,92,93,95,94,88,89,91,92,93,95,94,93,92,88,89,91,92,93,95,94,0],"f":[0,0,0,0,0,[1],[[2,3],4],[2,[[6,[5]]]],[2,[[6,[5]]]],[2,[[6,[5]]]],[2,[[6,[5]]]],[7,8],[7,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,9],[[]],0,[7,5],[5,[[4,[7]]]],[5,[[4,[9]]]],[5,[[11,[10]]]],[5,[[4,[9]]]],[5,[[4,[12]]]],[5,[[4,[12]]]],[5,[[4,[13]]]],[5,[[4,[13]]]],[5,[[4,[14]]]],[5,[[4,[14]]]],[[7,15],[[11,[16]]]],[[7,15],[[11,[16]]]],[[]],[[]],[[]],[[]],[[]],[[2,8],17],[[2,8],17],[[]],[[]],[[]],[[]],[[]],[[7,2],[[6,[7]]]],[[9,2],18],[[12,2],18],[[13,2],18],[[14,2],18],[[],19],[[],19],[[],19],[[],19],[[],[[20,[9]]]],[[],[[20,[12]]]],[[],[[20,[13]]]],[[],[[20,[14]]]],[[[0,[21,22,23]]],10],[24],[7,[[17,[25]]]],[[7,2],18],[[]],[[],26],[[[27,[5]]],[[11,[28]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[[27,[5]]],[[11,[28]]]],[[[27,[5]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],[[],29],[[],29],[[],29],[2,30],[2,30],[2,30],[2,30],[2,30],0,[[]],[[]],[[]],[[]],[[]],[2,[[11,[[6,[5]],10]]]],[2,[[11,[[6,[5]],10]]]],[2,[[11,[[6,[5]],10]]]],[2,[[11,[[6,[5]],10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[[],31],[[],31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,33],[34,34],[[]],[35],[35],0,[[],36],[[[38,[37]]],[[41,[[40,[39]]]]]],0,[[34,34],33],[[],33],[[],[[41,[[40,[39]]]]]],[[37,15],42],[[34,15],42],[43,[[41,[[40,[39]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[34,44]],0,[[],45],[[]],[[]],[[]],[[]],[[]],[[]],[[26,38,[46,[26]]],[[41,[[40,[39]]]]]],[[],[[17,[[38,[47]]]]]],0,0,[[[38,[37]]],[[41,[[40,[39]]]]]],[[],[[41,[[40,[39]]]]]],[[]],[48],[48,49],0,[[],[[41,[[40,[39]]]]]],[[],[[41,[[40,[39]]]]]],[[],[[41,[[40,[39]]]]]],[[],[[41,[[40,[39]]]]]],[[],[[41,[[40,[39]]]]]],[50,51],[[],34],0,0,0,0,[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],[[41,[[40,[39]]]]]],0,0,[52,31],[[]],[[]],[[]],[[]],[[53,35]],[[53,[38,[37]]],[[41,[[40,[39]]]]]],[[]],[[]],[52,[[38,[[54,[50]]]]]],[[52,55],[[51,[[40,[56]]]]]],[[52,[38,[[54,[50]]]],[38,[57]],58],[[51,[[40,[56]]]]]],[[]],[[]],[[45,[38,[[54,[50]]]],[60,[59]]],53],[[[61,[[54,[53]]]]],52],0,[53,[[41,[[40,[39]]]]]],[[52,62]],[[52,48]],[52,[[38,[57]]]],[52,63],[52,55],[53,[[41,[[40,[39]]]]]],[53,[[41,[[40,[39]]]]]],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],[[]],[[]],0,[[64,56],[[38,[[54,[50]]]]]],[[64,56],[[38,[[54,[65]]]]]],[[]],[[]],[[],64],[64,51],[[]],0,[[]],0,0,[64],[[],11],[[],11],[[],29],[[]],0,0,0,[66,31],[66,31],[[]],[[]],[[]],[[]],[[]],[[]],[[66,32],33],[[66,35]],0,0,[[67,15],42],[43,[[41,[[40,[39,68]]]]]],[[]],[[]],[[]],[66,45],0,0,0,[[]],[[]],[[]],[[26,38,[46,[26]]],[[41,[[40,[39,68]]]]]],[66,[[17,[[38,[47]]]]]],0,0,0,[[45,26,26,26,26,[38,[[54,[67]]]],[17,[26]]],66],[[26,[17,[26]]],67],[69,[[41,[[40,[39]]]]]],0,0,[[66,[38,[37]]],[[41,[[40,[39]]]]]],0,[66],[[66,48]],[69,[[38,[37]]]],[[69,48],49],[48,49],[69,70],[69,71],[[66,50],51],[66,34],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],[[],29],0,[[]],[[]],[[]],0,[[72,[38,[[54,[72]]]],26,73],51],[[]],[[]],[[72,35]],[[72,[38,[37]]],[[41,[[40,[39]]]]]],[72,[[17,[74]]]],[[]],[[72,26,[38,[[54,[72]]]]],75],[[]],[[45,70,[38,[[54,[50]]]],[17,[26]],[17,[26]],[17,[[60,[26]]]],[17,[[60,[26]]]],[17,[26]],[60,[59]]],72],0,[72,[[41,[[40,[39]]]]]],[72,[[41,[[40,[39]]]]]],[72,[[76,[26]]]],[72,[[76,[26]]]],[72,[[41,[[40,[39]]]]]],[[],11],[[],11],[[],29],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[[],31],[77,31],[78,31],[75,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[75,75],[62,62],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[32,[38,[57]]],62],[[],63],[75,63],[[],[[38,[[54,[50]]]]]],[79,[[38,[[54,[50]]]]]],[77,[[38,[[54,[50]]]]]],[75,[[38,[[54,[50]]]]]],[55,[[51,[[40,[56]]]]]],[[77,55],[[51,[[40,[56]]]]]],[[78,55],[[51,[[40,[56]]]]]],[[75,55],[[51,[[40,[56]]]]]],[[[38,[[54,[50]]]],[38,[57]],58],[[51,[80]]]],[[77,[38,[[54,[50]]]],[38,[57]],58],[[51,[80]]]],[[78,[38,[[54,[50]]]],[38,[57]],58],[[51,[[40,[56]]]]]],[[75,[38,[[54,[50]]]],[38,[57]],58],[[51,[[40,[56]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[41,[[40,[39]]]]]],[75,[[41,[[40,[39]]]]]],[[62,58],[[41,[[40,[39]]]]]],[75,75],0,0,[62],[[79,62]],[[77,62]],[[75,62]],[48],[[79,48]],[[77,48]],[[75,48]],[73],[[],[[38,[57]]]],[79,[[38,[57]]]],[77,[[38,[57]]]],[75,[[38,[57]]]],0,0,0,0,[[],55],[79,55],[77,55],[75,55],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[]],[[]],[[]],[[]],[[]],[[]],[62,62],[[79,62],62],0,[81,31],[81,31],[[]],[[]],[[81,32],33],[81,81],[[81,35]],[[[0,[82,22,83]],[0,[58,22]]],[[38,[[54,[[60,[[84,[26]]]]]]]]]],[[81,15],42],[[]],[81,45],0,[[]],[81,[[17,[[38,[47]]]]]],[45,81],[[81,[38,[37]]],[[41,[[40,[39]]]]]],[81],[[81,48]],[[81,50],51],[81,34],[[],11],[[],11],[[],29],[[]],0,0,0,0,0,0,0,0,0,0,[1],[[]],[[]],[[]],[[]],[[]],[[]],[85,85],[[]],[[86,[60,[45]]]],[[85,85],33],[[],33],[[85,15],42],[[87,15],42],[[]],[[]],[[]],[[]],[[]],[[]],[[26,39],39],[71],[[26,56],39],[[86,[60,[45]],26,33,33]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],[[],29],[[]],[[]],[[]],[[71,56],39],0,[[],[[41,[[40,[39]]]]]],[[],[[38,[37]]]],[48,49],[[],71],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],88],[[],89],0,[90,[[11,[89]]]],[90,[[11,[91]]]],[90,[[11,[92]]]],[90,[[11,[93]]]],[90,[[11,[94]]]],[88],[95],[[93,15],42],[[95,15],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[89,88],[[51,[95]]]],0,0,[[89,96],11],[[91,96],11],[[92,96],11],[[93,96],11],[[94,96],11],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[58,45,97],51]],"c":[],"p":[[3,"Private"],[3,"Python"],[3,"PyModule"],[6,"PyResult"],[3,"PyAny"],[3,"Py"],[3,"AnyhowError"],[3,"PyObject"],[3,"AnyhowWrapper"],[3,"PyErr"],[4,"Result"],[3,"Deployment"],[3,"Host"],[3,"Service"],[3,"Formatter"],[3,"Error"],[4,"Option"],[6,"PyObject"],[3,"PyClassItemsIter"],[3,"LazyTypeObject"],[8,"PyErrArguments"],[8,"Send"],[8,"Sync"],[3,"Demand"],[8,"Error"],[3,"String"],[8,"Into"],[3,"PyDowncastError"],[3,"TypeId"],[3,"PyTypeObject"],[8,"Any"],[4,"ClientStrategy"],[15,"bool"],[4,"HostTargetType"],[3,"ResourceBatch"],[3,"ResourcePool"],[3,"ResourceResult"],[3,"Arc"],[8,"Future"],[3,"Box"],[3,"Pin"],[6,"Result"],[4,"SocketAddr"],[8,"Hasher"],[15,"usize"],[15,"slice"],[8,"LaunchedHost"],[4,"ServerStrategy"],[4,"ServerBindConfig"],[8,"Host"],[6,"Result"],[3,"CustomClientPort"],[3,"CustomService"],[3,"RwLock"],[4,"SourcePath"],[8,"FnOnce"],[8,"HydroflowServer"],[8,"Fn"],[15,"u16"],[3,"Vec"],[3,"Weak"],[4,"ServerConfig"],[4,"ServerPort"],[3,"Deployment"],[8,"Service"],[3,"GCPComputeEngineHost"],[3,"GCPNetwork"],[3,"Global"],[3,"LaunchedComputeEngine"],[3,"PathBuf"],[15,"str"],[3,"HydroflowCrate"],[8,"HydroflowSink"],[15,"i32"],[3,"HydroflowPortConfig"],[3,"Receiver"],[3,"NullSourceSink"],[3,"DemuxSink"],[3,"TaggedSource"],[6,"ReverseSinkInstantiator"],[3,"LocalhostHost"],[8,"AsyncRead"],[8,"Unpin"],[3,"Sender"],[4,"LeafStatus"],[3,"ProgressTracker"],[4,"BarTree"],[3,"TerraformPool"],[3,"TerraformBatch"],[8,"Deserializer"],[3,"TerraformConfig"],[3,"TerraformProvider"],[3,"TerraformOutput"],[3,"TerraformResultOutput"],[3,"TerraformResult"],[8,"Serializer"],[3,"Duration"],[8,"LaunchedBinary"],[8,"HydroflowSource"],[8,"LaunchedSSHHost"]]},\
"hydroflow":{"doc":"Hydroflow is a low-level dataflow-based runtime system for …","t":"OOCCAOCOOOCCXACOOOOCACCXCCCAOOOCADDIDDDGGDDLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLDDQDQDDIIIILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAQQIIDDDLLLLLLLLLLLLALLLLLLLLLLLLLLAAALLLALLLAAAALLALLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKKKKKKKKKKIIIQDDIDKLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLALLLLLKLLLKLLLLLLLLKLLLLLLLQIIIQKKKDIDLLLLLLLLLLKLLLLLLLLLLLLDMMLLLLLLLLLLALLLLGIDDEGGEGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLDLLLLLLLLLLLGGGGGGGGGGFFFFFAFFFFFFFAFFFFFFFFFFFFFFFFAFIDLLKLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLANNDDDELLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLF","n":["assert_var_impl","assert_var_impl","bincode","bytes","compiled","datalog","futures","hydroflow_parser","hydroflow_syntax","hydroflow_syntax_noemit","itertools","lattices","main","props","pusherator","rassert","rassert","rassert_eq","rassert_eq","rustc_hash","scheduled","serde","serde_json","test","tokio","tokio_stream","tokio_util","util","var_args","var_expr","var_type","variadics","pull","CrossJoin","CrossJoinState","HalfJoinState","HalfJoinStateLattice","HalfMultisetJoinState","HalfSetJoinState","JoinStateLatticeMut","SetJoinState","SymmetricHashJoin","SymmetricHashJoinLattice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build","clear","clear","clear","default","default","default","default","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","multiunzip","multiunzip","multiunzip","new","new","new_from_mut","new_from_mut","next","next","next","pop_match","pop_match","pop_match","probe","probe","probe","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Consecutive","Duplicates","Duplicates","Monotonic","Monotonicity","NoDuplicates","NonMonotonic","PropDuplicates","PropMonotonicity","Props","Spec","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","from","into","into","into","into","into","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","wrap","Props","Props","PullSpec","PushSpec","HandoffId","StateId","SubgraphId","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","graph","graph_ext","handoff","hash","hash","hash","input","into","into","into","net","port","query","reactor","serialize","serialize","state","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Context","abort_tasks","add_state","borrow","borrow_mut","current_stratum","current_subgraph","current_tick","from","into","join_tasks","remove_state","schedule_subgraph","spawn_task","state_mut","state_ref","try_from","try_into","type_id","waker","Hydroflow","abort_tasks","add_channel_input","add_input","add_input_from_stream","add_read_tcp_stream","add_state","add_subgraph","add_subgraph_2in_2out","add_subgraph_2in_out","add_subgraph_2sink","add_subgraph_in_2out","add_subgraph_in_out","add_subgraph_n_m","add_subgraph_sink","add_subgraph_source","add_subgraph_stratified","add_subgraph_stratified_n_m","add_tcp_stream","add_write_tcp_stream","borrow","borrow_mut","context_mut","current_stratum","current_tick","default","diagnostics","drop","from","inbound_tcp_vertex","inbound_tcp_vertex_port","into","join_tasks","make_edge","meta_graph","new","next_stratum","outbound_tcp_vertex","reactor","recv_events","recv_events_async","run","run_async","run_available","run_available_async","run_stratum","run_tick","spawn_task","try_from","try_into","try_recv_events","type_id","GraphExt","add_channel_input","add_input","add_input_from_stream","add_subgraph_2in_2out","add_subgraph_2in_out","add_subgraph_2sink","add_subgraph_in_2out","add_subgraph_in_out","add_subgraph_sink","add_subgraph_source","CanReceive","Handoff","HandoffMeta","Inner","Iter","TeeingHandoff","TryCanReceive","VecHandoff","any_ref","any_ref","any_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut_swap","borrow_mut_swap","borrow_mut_swap","clone","clone","clone_into","clone_into","cmp","default","default","eq","equivalent","fmt","from","from","from","give","give","give","give","give","give","handoff_list","hash","into","into","into","into_iter","is_bottom","is_bottom","is_bottom","partial_cmp","take_inner","take_inner","take_inner","tee","to_owned","to_owned","try_from","try_from","try_from","try_give","try_give","try_into","try_into","try_into","type_id","type_id","type_id","Ctx","HandoffList","PortList","PortListSplit","Suffix","make_ctx","set_graph_meta","split_ctx","Buffer","Give","Input","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","flush","from","from","give","give","give","into","into","new","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Message","address","batch","borrow","borrow_mut","clone","clone_into","decode","eq","equivalent","fmt","from","into","network_vertex","to_owned","try_from","try_into","type_id","Address","Polarity","Port","PortCtx","RECV","RecvCtx","RecvPort","SEND","SendCtx","SendPort","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut_swap","borrow_mut_swap","from","from","from","from","give","give","into","into","into","into","ref_cast","ref_cast_mut","take_inner","take_inner","try_from","try_from","try_from","try_from","try_give","try_give","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Operator","Query","borrow","borrow","borrow_mut","borrow_mut","concat","concat","default","filter","from","from","into","into","map","new","run_available","sink","source","tee","try_from","try_from","try_into","try_into","type_id","type_id","Reactor","borrow","borrow_mut","clone","clone_into","from","into","into_waker","to_owned","trigger","try_from","try_into","type_id","StateHandle","borrow","borrow_mut","clone","clone_into","fmt","from","into","to_owned","try_from","try_into","type_id","TcpFramedSink","TcpFramedStream","UdpBytesSink","UdpBytesStream","UdpFramedSink","UdpFramedStream","UdpLinesSink","UdpLinesStream","UdpSink","UdpStream","bind_tcp","bind_tcp_bytes","bind_tcp_lines","bind_udp_bytes","bind_udp_lines","clear","collect_ready","collect_ready_async","connect_tcp","connect_tcp_bytes","connect_tcp_lines","deserialize_from_bytes","ipv4_resolve","monotonic_map","ready_iter","serialize_to_bytes","sort_unstable_by_key_hrtb","tcp_bytes","tcp_bytestream","tcp_framed","tcp_lines","udp_bytes","udp_bytestream","udp_framed","udp_lines","unbounded_channel","unix_bytes","unix_bytestream","unix_framed","unix_lines","unsync","unsync_channel","Clear","ClearDefault","borrow","borrow_mut","clear","clear","clone","clone_into","cmp","default","eq","equivalent","fmt","from","hash","into","partial_cmp","to_owned","try_from","try_into","type_id","MonotonicMap","borrow","borrow_mut","clone","clone_into","default","fmt","from","get_mut_clear","get_mut_default","get_mut_with","into","new_init","to_owned","try_from","try_into","type_id","mpsc","Closed","Full","Receiver","SendError","Sender","TrySendError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded","channel","clone","clone_into","close","close_this_sender","drop","drop","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","is_closed","poll_close","poll_flush","poll_next","poll_ready","poll_recv","provide","provide","recv","send","start_send","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll_next","try_send","type_id","type_id","type_id","type_id","unbounded"],"q":[[0,"hydroflow"],[32,"hydroflow::compiled"],[33,"hydroflow::compiled::pull"],[123,"hydroflow::props"],[170,"hydroflow::props::wrap"],[174,"hydroflow::scheduled"],[235,"hydroflow::scheduled::context"],[255,"hydroflow::scheduled::graph"],[307,"hydroflow::scheduled::graph_ext"],[318,"hydroflow::scheduled::handoff"],[384,"hydroflow::scheduled::handoff::handoff_list"],[392,"hydroflow::scheduled::input"],[418,"hydroflow::scheduled::net"],[436,"hydroflow::scheduled::net::network_vertex"],[437,"hydroflow::scheduled::port"],[484,"hydroflow::scheduled::query"],[510,"hydroflow::scheduled::reactor"],[523,"hydroflow::scheduled::state"],[535,"hydroflow::util"],[577,"hydroflow::util::clear"],[598,"hydroflow::util::monotonic_map"],[615,"hydroflow::util::unsync"],[616,"hydroflow::util::unsync::mpsc"]],"d":["Asserts that the variable’s type implements the given …","Asserts that the variable’s type implements the given …","","","Hydroflow’s inner (intra-subgraph) compiled layer.","Generate a Hydroflow instance from Datalog code.","","Parse Hydroflow “surface syntax” without emitting code.","Create a Hydroflow instance using Hydroflow’s custom “…","<code>hydroflow_syntax!</code> but will not emit any diagnostics …","","","","Hydroflow lattice and flow properties, very WIP.","","<code>assert!</code> but returns a [<code>Result&lt;(), String&gt;</code>] instead of …","<code>assert!</code> but returns a [<code>Result&lt;(), String&gt;</code>] instead of …","<code>assert_eq!</code> but returns a [<code>Result&lt;(), String&gt;</code>] instead of …","<code>assert_eq!</code> but returns a [<code>Result&lt;(), String&gt;</code>] instead of …","","Hydroflow’s outer scheduled layer. Deals with …","","","","","","","Helper utilities for the Hydroflow surface syntax.","Macro for pattern-matching with variadic tuples. This is …","Macro creating a variadic tuple value from a list of …","Macro creating a variadic tuple type from a list of types.","","Pull-based operator helpers, i.e. <code>Iterator</code> helpers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","A handoff’s ID. Invalid if used in a different …","A staten handle’s ID. Invalid if used in a different …","A subgraph’s ID. Invalid if used in a different …","","","","","","","","","","","","","Module for the user-facing <code>Context</code> object.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Module for the <code>Hydroflow</code> struct and helper items.","Helper extensions for <code>Hydroflow</code>.","Module for all <code>Handoff</code>-related items.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This module contiains networking code.","Organizational module for Hydroflow Send/RecvCtx structs …","Old query API, where each operator is a single subgraph. …","Module for <code>Reactor</code>.","","","Module for <code>StateHandle</code>, part of the “state API”.","","","","","","","","","","","","","","","The main state of the Hydroflow instance, which is …","Aborts all tasks spawned with <code>Self::spawn_task</code>.","Adds state to the context and returns the handle.","","","Gets the current stratum nubmer.","Gets the ID of the current subgraph.","Gets the current tick (local time) count.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Waits for all tasks spawned with <code>Self::spawn_task</code> to …","Removes state from the context returns it as an owned heap …","Schedules a subgraph.","Spawns an async task on the internal Tokio executor.","Returns an exclusive reference to the state.","Returns a shared reference to the state.","","","","Returns a <code>Waker</code> for interacting with async Rust. Waker …","A Hydroflow graph. Owns, schedules, and runs the compiled …","Alias for <code>Context::abort_tasks</code>.","","","","","Adds referenceable state into the <code>Hydroflow</code> instance. …","Adds a new compiled subgraph with the specified inputs and …","","","","","","Adds a new compiled subgraph with a variable number of …","","","Adds a new compiled subgraph with the specified inputs, …","Adds a new compiled subgraph with a variable number of …","","","","","Gets a exclusive (mut) ref to the internal context, …","Gets the current stratum nubmer.","Gets the current tick (local time) count.","","Returns any diagnostics generated by the surface syntax …","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Alias for <code>Context::join_tasks</code>.","Creates a handoff edge and returns the corresponding send …","Return a handle to the meta <code>HydroflowGraph</code> if set. The …","Create a new empty Hydroflow graph.","Go to the next stratum which has work available, possibly …","","Returns a reactor for externally scheduling subgraphs, …","Enqueues subgraphs triggered by external events, blocking …","Enqueues subgraphs triggered by external events …","Runs the dataflow graph forever.","Runs the dataflow graph forever.","Runs the dataflow until no more (externally-triggered) …","Runs the dataflow until no more (externally-triggered) …","Runs the current stratum of the dataflow until no more …","Runs the dataflow until the next tick begins. Returns true …","Alias for <code>Context::spawn_task</code>.","","","Enqueues subgraphs triggered by events without blocking.","","Convenience extension methods for the Hydroflow struct.","","Adds an “input” operator, returning a handle to insert …","","Adds a subgraph with specific topology:","Adds a subgraph with specific topology:","Adds a subgraph with specific topology:","Adds a subgraph with specific topology:","Adds a subgraph with specific topology:","Adds a subgraph with specific topology:","Adds a subgraph with specific topology:","Trait representing somethign which we can give an item to.","Trait for handoffs to implement.","A handle onto the metadata part of a Handoff, with no …","Inner datastructure type.","Wrapper around <code>IntoIterator</code> to avoid trait impl conflicts.","","Trait representing something which we can attempt to give …","A Vec-based FIFO handoff.","Helper to cast an instance of <code>HandoffMeta</code> to <code>Any</code>. In …","","","","","","","","","Take the inner datastructure by swapping input and output …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Give a value to the handoff.","","","","See <code>CanReceive::give</code>.","","Module for variadic handoff port lists, <code>PortList</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return if the handoff is empty.","","","","Take the inner datastructure, similar to <code>std::mem::take</code>.","","","","","","","","","Try to give a value to the handoff, may return an error if …","See <code>TryCanReceive::try_give</code>.","","","","","","","The <code>Variadic</code> return type of <code>Self::make_ctx</code>.","A variadic list of Handoff types, represented using a …","Sealed trait for variadic lists of ports.","Trait for splitting a list of ports into two.","The suffix, second half of the split.","Iteratively/recursively construct a <code>Ctx</code> variadic list.","Iteratively/recursively set the graph metadata for each …","Split the port list, returning the prefix and <code>Self::Suffix</code> …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","An empty trait used to denote <code>Polarity</code>: either <strong>send</strong> or …","Lightweight ID struct representing an input or output port …","Wrapper around a handoff to differentiate between output …","An uninstantiable type used to tag port <code>Polarity</code> as <strong>receive</strong>…","Recv-specific <code>PortCtx</code>. Input to receive from a handoff.","Recv-specific variant of <code>Port</code>. An input port.","An uninstantiable type used to tag port <code>Polarity</code> as <strong>send</strong>.","Send-specific <code>PortCtx</code>. Output to send into a handoff.","Send-specific variant of <code>Port</code>. An output port.","","","","","","","","","See <code>Handoff::borrow_mut_swap</code>.","See <code>Handoff::borrow_mut_swap</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Alias for <code>Handoff::give</code> on the inner <code>H</code>.","Alias for <code>Handoff::give</code> on the inner <code>H</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","See <code>Handoff::take_inner</code>.","See <code>Handoff::take_inner</code>.","","","","","Alias for <code>Handoff::try_give</code> on the inner <code>H</code>.","Alias for <code>Handoff::try_give</code> on the inner <code>H</code>.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","A handle into a specific super::graph::Hydroflow instance …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Convert this <code>Reactor</code> into a <code>std::task::Waker</code> for use with …","","Trigger a subgraph as an external event.","","","","A handle into a particular <code>Hydroflow</code> instance, referring …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","A framed TCP <code>Sink</code> (sending).","A framed TCP <code>Stream</code> (receiving).","A UDP undelimited bytes <code>Sink</code> (sending).","A UDP undelimited bytes <code>Stream</code> (receiving).","A framed UDP <code>Sink</code> (sending).","A framed UDP <code>Stream</code> (receiving).","A UDP newline-delimited <code>String</code> <code>Sink</code> (sending).","A UDP newline-delimited <code>String</code> <code>Stream</code> (receivng).","A UDP length-delimited frame <code>Sink</code> (sending).","A UDP length-delimited frame <code>Stream</code> (receiving).","Create a listening tcp socket, and then as new connections …","Returns a newline-delimited bytes <code>Sender</code>, <code>Receiver</code>, and …","This is the same thing as <code>bind_tcp_bytes</code> except instead of …","Returns a length-delimited bytes <code>Sink</code>, <code>Stream</code>, and …","Returns a newline-delimited bytes <code>Sink</code>, <code>Stream</code>, and …","Module for the <code>Clear</code> trait.","Collects the immediately available items from the <code>Stream</code> …","Collects the immediately available items from the <code>Stream</code> …","This is the inverse of bind_tcp, when messages enqueued …","This is inverse of bind_tcp_bytes. <code>(Bytes, SocketAddr)</code> …","This is the same thing as <code>connect_tcp_bytes</code> except instead …","Serialize a message from bytes using bincode.","Resolve the <code>ipv4</code> <code>SocketAddr</code> from an IP or hostname string.","Module for <code>MonotonicMap</code>.","Returns an <code>Iterator</code> of any immediately available items …","Serialize a message to bytes using bincode.","Sort a slice using a key fn which returns references.","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for undelimited …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> from the given …","Helper creates a TCP <code>Stream</code> and <code>Sink</code> for <code>str</code>ings delimited …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for undelimited …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> from the given …","Helper creates a UDP <code>Stream</code> and <code>Sink</code> for <code>String</code>s delimited …","Returns a channel as a (1) unbounded sender and (2) …","Helper creates a Unix <code>Stream</code> and <code>Sink</code> for <code>Bytes</code> strings …","Helper creates a Unix <code>Stream</code> and <code>Sink</code> for undelimited …","Helper creates a Unix <code>Stream</code> and <code>Sink</code> from the given …","Helper creates a Unix <code>Stream</code> and <code>Sink</code> for <code>str</code>ings …","Unsync (i.e. single-threaded) synchronization primitives.","Returns an unsync channel as a (1) sender and (2) receiver …","A trait for abstracting over the <code>.clear()</code> method available …","A wrapper struct which implements <code>Clear</code> by setting self to …","","","Clears the collection without neccesarily freeing …","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","A map-like interface which in reality only stores one …","","","","","","","Returns the argument unchanged.","Gets a mutable reference to the inner value. If <code>key</code> is …","Gets a mutable reference to the inner value. If <code>key</code> is …","Inserts the value using the function if new <code>key</code> is …","Calls <code>U::from(self)</code>.","Creates a new <code>MonotonicMap</code> initialized with the given …","","","","","Unsync single-producer single-consumer channel (i.e. a …","The receive half of the channel was explicitly closed or …","The data could not be sent on the channel because the …","Receiving half of an unsync MPSC.","Error returned by the <code>Sender</code>.","Send half of am unsync MPSC.","This enumeration is the list of the possible error …","","","","","","","","","Create a bounded unsync MPSC channel. Panics if capacity …","Create an unsync MPSC channel, either bounded (if <code>capacity</code> …","","","Closes this receiving end, not allowing more values to be …","Close this sender. No more messages can be sent from this …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If this sender or the corresponding <code>Receiver</code> is closed.","","","","","Poll for a value.","","","Receive a value asynchronously.","Asynchronously sends value to the receiver.","","","","","","","","","","","","","","Tries to send the value to the receiver without blocking.","","","","","Create an unbounded unsync MPSC channel."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,13,15,7,19,5,6,8,13,15,7,19,5,6,14,5,6,7,5,6,8,7,5,6,5,6,8,13,15,7,19,5,6,8,13,15,7,19,5,6,13,15,19,13,15,19,13,15,15,19,13,15,19,14,5,6,14,5,6,8,13,15,7,19,5,6,8,13,15,7,19,5,6,8,13,15,7,19,5,6,0,0,110,0,110,0,0,0,0,0,0,111,112,113,114,115,111,112,113,114,115,111,112,113,114,115,111,112,113,114,115,111,112,113,114,115,111,112,113,114,115,111,112,113,114,115,0,116,117,0,0,0,0,0,23,24,25,23,24,25,23,24,25,23,24,25,0,23,24,25,23,24,25,23,23,24,24,25,23,24,25,0,0,0,23,24,25,0,23,24,25,0,0,0,0,23,24,0,23,24,25,23,24,23,24,25,23,24,25,23,24,25,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,118,118,118,118,118,118,118,118,118,118,0,0,0,40,0,0,0,0,119,49,65,49,65,68,49,65,68,40,49,65,65,68,65,68,68,49,65,68,68,68,49,65,68,41,49,49,49,40,65,0,68,49,65,68,68,119,49,65,68,40,49,65,65,65,68,49,65,68,73,40,49,65,68,49,65,68,52,0,0,0,120,52,52,120,0,0,0,45,44,45,44,45,45,45,44,45,44,74,45,44,45,44,44,45,45,44,45,44,45,44,0,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,0,0,0,0,0,0,0,0,0,0,53,51,121,77,53,51,121,77,76,77,53,51,121,77,78,77,53,51,121,77,77,77,76,77,53,51,121,77,78,77,53,51,121,77,53,51,121,77,0,0,80,81,80,81,80,81,81,80,80,81,80,81,80,81,81,80,81,80,80,81,80,81,80,81,0,63,63,63,63,63,63,63,63,63,63,63,63,0,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,98,100,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,104,104,0,0,0,0,102,103,83,104,102,103,83,104,0,0,102,102,103,102,102,103,104,104,83,83,104,104,102,103,83,104,104,102,103,83,104,102,102,102,103,102,103,83,104,103,102,102,102,83,104,102,103,83,104,102,103,83,104,103,102,102,103,83,104,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[[5,[[0,[2,3,4]],2,2]],[0,[2,3,4]],2],1],[[[6,[[0,[2,3,4]],[0,[2,3]],2]],[0,[2,3,4]],[0,[2,3]]],1],[7],[5],[6],[[],8],[[],7],[[],5],[[],6],[[[5,[9,9,9]],10],11],[[[6,[9,9,9]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12,[8,[[0,[3,2]],[0,[3,2]]]]],[[13,[12,[0,[3,2]],12,[0,[3,2]]]]]],[[12,12],[[15,[[0,[3,4,2]],12,2,12,2,[14,[[0,[3,4,2]],2,2]],[14,[[0,[3,4,2]],2,2]]]]]],[[12,12,[14,[[0,[3,4,2]],2,2]],[14,[[0,[3,4,2]],2,2]]],[[15,[[0,[3,4,2]],12,2,12,2,[14,[[0,[3,4,2]],2,2]],[14,[[0,[3,4,2]],2,2]]]]]],[[12,12,[16,[[0,[3,4,2]]]],[7,[[0,[3,4,2]],[0,[17,18]]]],[7,[[0,[3,4,2]],[0,[17,18]]]]],[[19,[[0,[3,4,2]],[0,[17,18]],[0,[17,18]]]]]],[[[13,[12,[0,[3,2]],12,[0,[3,2]]]]],20],[[[15,[[0,[3,4,2]],12,2,12,2,[14,[[0,[3,4,2]],2,2]],[14,[[0,[3,4,2]],2,2]]]]],20],[[[19,[[0,[3,4,2]],2,2]]],20],[[],20],[[[5,[[0,[2,3,4]],2,2]]],20],[[[6,[[0,[2,3,4]],[0,[2,3]],2]]],20],[[]],[[[5,[[0,[2,3,4]],2,2]],[0,[2,3,4]],2]],[[[6,[[0,[2,3,4]],[0,[2,3]],2]],[0,[2,3,4]],2]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[23,23],[24,24],[25,25],[[]],[[]],[[]],0,[[23,23],1],[[24,24],1],[[25,25],1],[[],1],[[],1],[[],1],[[23,10],11],[[23,10],11],[[24,10],11],[[24,10],11],[[25,10],11],[[]],[[]],[[]],0,0,0,[[23,26]],[[24,26]],[[25,26]],0,[[]],[[]],[[]],0,0,0,0,[[23,27],21],[[24,27],21],0,[[]],[[]],[[]],[[],28],[[],28],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],0,[29],[[29,30],[[31,[30]]]],[[]],[[]],[29,32],[29,23],[29,32],[[]],[[]],[29],[[29,[31,[30]]],[[33,[30]]]],[[29,23,1]],[[29,34]],[[29,[31,[30]]],30],[[29,[31,[30]]],30],[[],21],[[],21],[[],22],[29,35],0,[36],[[36,[39,[[38,[37]]]],[42,[[0,[40,41]]]]],[[44,[43]]]],[[36,[39,[[38,[37]]]],[42,[[0,[40,41]]]]],[[44,[45]]]],[[36,[39,[[38,[37]]]],[42,[[0,[40,41]]]],46]],[[36,47],[[50,[[49,[48]]]]]],[[36,30],[[31,[30]]]],[[36,[39,[[38,[37]]]],[52,[51]],[52,[53]],54],23],[[36,[39,[[38,[37]]]],[50,[40]],[50,[40]],[42,[40]],[42,[40]],54],23],[[36,[39,[[38,[37]]]],[50,[40]],[50,[40]],[42,[40]],54],23],[[36,[39,[[38,[37]]]],[50,[40]],[50,[40]],54],23],[[36,[39,[[38,[37]]]],[50,[40]],[42,[40]],[42,[40]],54],23],[[36,[39,[[38,[37]]]],[50,[40]],[42,[40]],54],23],[[36,[39,[[38,[37]]]],[55,[[50,[40]]]],[55,[[42,[40]]]],54],23],[[36,[39,[[38,[37]]]],[50,[40]],54],23],[[36,[39,[[38,[37]]]],[42,[40]],54],23],[[36,[39,[[38,[37]]]],32,[52,[51]],[52,[53]],54],23],[[36,[39,[[38,[37]]]],32,[55,[[50,[40]]]],[55,[[42,[40]]]],54],23],[[36,47]],[[36,47],[[42,[[49,[48]]]]]],[[]],[[]],[[36,23],29],[36,32],[36,32],[[],36],[36,[[20,[[58,[[57,[56]]]]]]]],[36],[[]],[36],[[36,59],[[50,[[49,[[0,[60,61]]]]]]]],[[]],[36,34],[[36,[39,[[38,[37]]]]]],[36,[[20,[62]]]],[[],36],[[36,1],1],[36,[[42,[49]]]],[36,63],[36,[[20,[32]]]],[36,[[20,[32]]]],[36,[[20,[64]]]],[36,[[20,[64]]]],[36,1],[36,1],[36,1],[36,1],[[36,34]],[[],21],[[],21],[36],[[],22],0,[[[39,[[38,[37]]]],[42,[[0,[40,41]]]]],[[44,[43]]]],[[[39,[[38,[37]]]],[42,[[0,[40,41]]]]],[[44,[45]]]],[[[39,[[38,[37]]]],[42,[[0,[40,41]]]],46]],[[[39,[[38,[37]]]],[50,[40]],[50,[40]],[42,[40]],[42,[40]],54],23],[[[39,[[38,[37]]]],[50,[40]],[50,[40]],[42,[40]],54],23],[[[39,[[38,[37]]]],[50,[40]],[50,[40]],54],23],[[[39,[[38,[37]]]],[50,[40]],[42,[40]],[42,[40]],54],23],[[[39,[[38,[37]]]],[50,[40]],[42,[40]],54],23],[[[39,[[38,[37]]]],[50,[40]],54],23],[[[39,[[38,[37]]]],[42,[40]],54],23],0,0,0,0,0,0,0,0,[[],30],[49,30],[65,30],[[]],[[]],[[]],[[]],[[]],[[]],[[],66],[49,66],[65,66],[[[65,[2]]],[[65,[2]]]],[[[68,[[0,[67,2]]]]],[[68,[[0,[67,2]]]]]],[[]],[[]],[[[68,[[0,[67,69]]]],[68,[[0,[67,69]]]]],70],[[],49],[[],65],[[[68,[[0,[67,71]]]],[68,[[0,[67,71]]]]],1],[[],1],[[[68,[[0,[67,9]]]],10],11],[[]],[[]],[[]],[[]],[[49,[68,[12]]],[[68,[12]]]],[[49,55],55],[[49,20],20],[41],[[[65,[2]],[55,[2]]],[[55,[2]]]],0,[[[68,[[0,[67,4]]]],26]],[[]],[[]],[[]],[[[68,[67]]]],[[],1],[49,1],[65,1],[[[68,[[0,[67,72]]]],[68,[[0,[67,72]]]]],[[20,[70]]]],[[]],[49],[65],[[[65,[2]]],[[65,[2]]]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[73,21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],0,0,0,0,0,[[[58,[0]]]],[[[58,[0]],[20,[23]],[20,[23]],[55,[24]]]],[[]],0,0,0,[[]],[[]],[[]],[[]],[45,45],[[]],[[],45],[[[44,[74]]]],[[]],[[]],[[],1],[45,1],[[[44,[74]]]],[[]],[[]],[[63,23,74],[[44,[74]]]],[[]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],0,0,0,[[]],[[]],[48,48],[[]],[75,48],[[48,48],1],[[],1],[[48,10],11],[[]],[[]],0,[[]],[[],21],[[],21],[[],22],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[76,[40]]],66],[[[77,[51,40]]],66],[[]],[[]],[[]],[[]],[[[78,[41,40]]]],[[[77,[53,41,40]]]],[[]],[[]],[[]],[[]],[[],[[77,[79]]]],[[],[[77,[79]]]],[[[76,[40]]]],[[[77,[51,40]]]],[[],21],[[],21],[[],21],[[],21],[[[78,[73,40]]],21],[[[77,[53,73,40]]],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],0,0,[[]],[[]],[[]],[[]],[[80,80],80],[[81,[55,[80]]],80],[[],81],[[80,82],80],[[]],[[]],[[]],[[]],[[80,82],80],[[],81],[81],[[80,82]],[[81,54],80],[[[80,[2]],32],[[55,[[80,[2]]]]]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],0,[[]],[[]],[63,63],[[]],[[]],[[]],[[63,23],35],[[]],[[63,23],[[21,[83]]]],[[],21],[[],21],[[],22],0,[[]],[[]],[31,31],[[]],[[[31,[9]],10],11],[[]],[[]],[[]],[[],21],[[],21],[[],22],0,0,0,0,0,0,0,0,0,0,[[84,[0,[2,85,86]]],[[21,[87]]]],[84],[84],[84],[84],0,[46,88],[46,[[0,[89,90]]]],[[[0,[2,85,86]]]],[[]],[[]],[[[92,[[58,[91]]]]],[[93,[60]]]],[37,[[21,[84,87]]]],0,[46,12],[94,75],[[58,82]],[47],[47],[[47,[0,[2,85]]]],[47],[95],[95],[[95,[0,[86,85]]]],[95],[[]],[96],[96],[[96,[0,[2,85]]]],[96],0,[[[20,[97]]]],0,0,[[]],[[]],[[]],[[[98,[89]]]],[[[98,[[0,[89,2]]]]],[[98,[[0,[89,2]]]]]],[[]],[[[98,[[0,[89,69]]]],[98,[[0,[89,69]]]]],70],[[],[[98,[89]]]],[[[98,[[0,[89,71]]]],[98,[[0,[89,71]]]]],1],[[],1],[[[98,[[0,[89,9]]]],10],11],[[]],[[[98,[[0,[89,4]]]],26]],[[]],[[[98,[[0,[89,72]]]],[98,[[0,[89,72]]]]],[[20,[70]]]],[[]],[[],21],[[],21],[[],22],0,[[]],[[]],[[[99,[[0,[72,2]],2]]],[[99,[[0,[72,2]],2]]]],[[]],[[],[[99,[72,89]]]],[[[99,[[0,[72,9]],9]],10],11],[[]],[[[99,[72,100]],72],100],[[[99,[72,89]],72],89],[[[99,[72]],72,101]],[[]],[[],[[99,[72]]]],[[]],[[],21],[[],21],[[],22],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32],[[[20,[97]]]],[102,102],[[]],[103],[102],[102],[103],[[[104,[[71,[[71,[[71,[71]]]]]]]],[104,[[71,[[71,[[71,[71]]]]]]]]],1],[[],1],[[[83,[9]],10],[[21,[105]]]],[[83,10],[[21,[105]]]],[[[104,[9]],10],[[21,[105]]]],[[104,10],[[21,[105]]]],[[]],[[]],[[]],[[]],[83,104],[[]],[[]],[[]],[[]],[102,1],[[[106,[102]],107],[[108,[21]]]],[[[106,[102]],107],[[108,[21]]]],[[[106,[103]],107],[[108,[20]]]],[[[106,[102]],107],[[108,[21]]]],[[103,107],[[108,[20]]]],[109],[109],[103,20],[102,[[21,[83]]]],[[[106,[102]]],21],[[]],[[],28],[[],28],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[106,107],[[108,[[20,[21]]]]]],[102,[[21,[104]]]],[[],22],[[],22],[[],22],[[],22],[[]]],"c":[],"p":[[15,"bool"],[8,"Clone"],[8,"Eq"],[8,"Hash"],[3,"HalfMultisetJoinState"],[3,"HalfSetJoinState"],[3,"HalfJoinStateLattice"],[3,"CrossJoinState"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[3,"CrossJoin"],[8,"HalfJoinState"],[3,"SymmetricHashJoin"],[6,"FxHashSet"],[8,"Merge"],[8,"ConvertFrom"],[3,"SymmetricHashJoinLattice"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"SubgraphId"],[3,"HandoffId"],[3,"StateId"],[8,"Hasher"],[8,"Serializer"],[3,"String"],[3,"Context"],[8,"Any"],[3,"StateHandle"],[15,"usize"],[3,"Box"],[8,"Future"],[3,"Waker"],[3,"Hydroflow"],[15,"str"],[4,"Cow"],[8,"Into"],[8,"Handoff"],[8,"CanReceive"],[6,"SendPort"],[3,"SyncSender"],[3,"Input"],[3,"Buffer"],[8,"Stream"],[3,"TcpStream"],[3,"Message"],[3,"VecHandoff"],[6,"RecvPort"],[4,"RECV"],[8,"PortList"],[4,"SEND"],[8,"FnMut"],[3,"Vec"],[3,"SerdeSpan"],[3,"Diagnostic"],[15,"slice"],[15,"u16"],[8,"DeserializeOwned"],[8,"Send"],[3,"HydroflowGraph"],[3,"Reactor"],[15,"never"],[3,"TeeingHandoff"],[3,"RefMut"],[8,"IntoIterator"],[3,"Iter"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[8,"PartialOrd"],[8,"TryCanReceive"],[8,"Give"],[3,"Bytes"],[6,"RecvCtx"],[3,"PortCtx"],[6,"SendCtx"],[8,"Polarity"],[3,"Operator"],[3,"Query"],[8,"Fn"],[3,"SendError"],[4,"SocketAddr"],[8,"Decoder"],[8,"Encoder"],[3,"Error"],[8,"FromIterator"],[8,"Default"],[8,"Extend"],[15,"u8"],[8,"AsRef"],[6,"Result"],[8,"Serialize"],[3,"UdpSocket"],[3,"UnixStream"],[3,"NonZeroUsize"],[3,"ClearDefault"],[3,"MonotonicMap"],[8,"Clear"],[8,"FnOnce"],[3,"Sender"],[3,"Receiver"],[4,"TrySendError"],[3,"Error"],[3,"Pin"],[3,"Context"],[4,"Poll"],[3,"Demand"],[8,"Props"],[3,"NonMonotonic"],[3,"Monotonic"],[3,"Consecutive"],[3,"Duplicates"],[3,"NoDuplicates"],[8,"PullSpec"],[8,"PushSpec"],[8,"GraphExt"],[8,"HandoffMeta"],[8,"PortListSplit"],[3,"Port"]]},\
"hydroflow_cli_integration":{"doc":"","t":"NEGIDDIIDNNNNDGGGQNNNNDNNNNQENEEEQQINNNNDNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLKLLKLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bound","BoundConnection","BufferedDrain","Connected","ConnectedDemux","ConnectedDirect","ConnectedSink","ConnectedSource","ConnectedTagged","Demux","Demux","Demux","Demux","DemuxDrain","DynSink","DynStream","DynStreamSink","Input","Merge","Merge","Merge","Merge","MergeSource","Null","Null","Null","Null","Output","RealizedServerPort","Server","ServerBindConfig","ServerOrBound","ServerPort","Sink","Stream","StreamSink","Tagged","Tagged","Tagged","Tagged","TaggedSource","TcpPort","TcpPort","TcpPort","TcpPort","UnixSocket","UnixSocket","UnixSocket","UnixSocket","accept_tcp","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connect","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_defn","from_defn","from_defn","from_defn","into","into","into","into","into","into","into","into","into","into","into","into_sink","into_sink","into_sink","into_source","into_source","into_source","keys","poll_close","poll_flush","poll_next","poll_next","poll_ready","serialize","serialize","sink_port","start_send","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll_next","try_poll_next","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"hydroflow_cli_integration"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Describes how to connect to a service which is listening …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,0,7,13,3,14,0,0,0,0,17,7,13,3,14,0,7,13,3,14,20,0,1,0,0,0,17,20,0,7,13,3,14,0,7,13,3,14,7,13,3,14,1,3,15,18,31,33,21,7,13,3,1,14,25,15,18,31,33,21,7,13,3,1,14,25,7,3,7,3,1,7,3,7,13,3,1,14,15,18,31,33,21,7,13,13,3,1,14,25,8,15,18,21,15,18,31,33,21,7,13,3,1,14,25,17,15,18,20,15,21,18,25,25,31,33,25,7,3,14,25,7,3,15,18,31,33,21,7,13,3,1,14,25,15,18,31,33,21,7,13,3,1,14,25,31,33,15,18,31,33,21,7,13,3,1,14,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,[[6,[[5,[4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[3,3],[[]],[[]],[1,8],[9,[[10,[7]]]],[9,[[10,[3]]]],[[7,11],12],[[13,11],12],[[3,11],12],[[1,11],12],[[14,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,13],[[]],[[]],[[]],[[]],[1,[[6,[[5,[4]]]]]],[1,[[6,[[5,[4]]]]]],[1,[[6,[[5,[4]]]]]],[1,[[6,[[5,[4]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,16],[[[18,[17]]]],[[]],[15,19],[[[21,[20]]]],0,[[[6,[[25,[[0,[22,23,24]]]]]],26],[[27,[10]]]],[[[6,[[25,[[0,[22,23,24]]]]]],26],[[27,[10]]]],[[[6,[[31,[28,[0,[29,23,24,30]]]]]],26],[[27,[32]]]],[[[6,[[33,[28,[0,[29,23,24,30]]]]]],26],[[27,[32]]]],[[[6,[[25,[[0,[22,23,24]]]]]],26],[[27,[10]]]],[[7,34],10],[[3,34],10],[14,7],[[[6,[[25,[[0,[22,23,24]]]]]]],10],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[6,26],[[27,[[32,[10]]]]]],[[6,26],[[27,[[32,[10]]]]]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35]],"c":[],"p":[[4,"ServerOrBound"],[3,"TcpStream"],[4,"ServerBindConfig"],[8,"Future"],[3,"Box"],[3,"Pin"],[4,"ServerPort"],[8,"Connected"],[8,"Deserializer"],[4,"Result"],[3,"Formatter"],[6,"Result"],[4,"RealizedServerPort"],[4,"BoundConnection"],[3,"ConnectedDirect"],[6,"DynSink"],[8,"ConnectedSink"],[3,"ConnectedDemux"],[6,"DynStream"],[8,"ConnectedSource"],[3,"ConnectedTagged"],[8,"Sink"],[8,"Send"],[8,"Sync"],[3,"DemuxDrain"],[3,"Context"],[4,"Poll"],[8,"Unpin"],[8,"Stream"],[8,"Sized"],[3,"MergeSource"],[4,"Option"],[3,"TaggedSource"],[8,"Serializer"],[3,"TypeId"]]},\
"hydroflow_datalog":{"doc":"","t":"O","n":["datalog"],"q":[[0,"hydroflow_datalog"]],"d":["Generate a Hydroflow instance from Datalog code."],"i":[0],"f":[0],"c":[],"p":[]},\
"hydroflow_datalog_core":{"doc":"","t":"FFFF","n":["gen_hydroflow_graph","hydroflow_graph_to_program","parse_pipeline","parse_static"],"q":[[0,"hydroflow_datalog_core"]],"d":["","","",""],"i":[0,0,0,0],"f":[[1,[[5,[2,[4,[3]]]]]],[[2,6],6],[[[8,[7]],9],[[5,[10,[4,[3]]]]]],[[[8,[7]],9],[[5,[11,[4,[3]]]]]]],"c":[],"p":[[3,"Literal"],[3,"HydroflowGraph"],[3,"Diagnostic"],[3,"Vec"],[4,"Result"],[3,"TokenStream"],[3,"String"],[3,"Spanned"],[8,"Fn"],[4,"Pipeline"],[4,"Expr"]]},\
"hydroflow_lang":{"doc":"","t":"AAAAADNNENDNLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLMMMLMLLLMLLLLLLLLLLLLLLLLENDNDDDDNNDNEDNDNENNLMLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMFALLLMLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLMAMLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMMFFNENNNNDENRNNNNNRNREDDENENRRRINNNNNNNDGNLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLKMLLLLLMKLLLLLLLLLLFFLLLLLLLLLLLLLLLMMLLMMFMMMLLLLLLLLLMMLMLMMFMMMMFMLLLMMMMMLMMKMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMMMDEDDNNNNDDNNNENDDEDLMMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLMMMLLLLLLLLLLLMLMLMMMLLLLLLLLLLLLMMMMLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDDLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLL","n":["diagnostic","graph","parse","pretty_span","union_find","Diagnostic","Error","Help","Level","Note","SerdeSpan","Warning","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","column","deserialize","deserialize","deserialize","emit","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","is_error","is_error","level","line","message","partial_cmp","path","serialize","serialize","serialize","span","spanned","to_owned","to_owned","to_owned","to_serde","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Color","Comp","DiMulGraph","Elided","FlatGraphBuilder","GraphEdgeId","GraphNodeId","GraphSubgraphId","Handoff","Hoff","HydroflowGraph","Int","Node","OpInstGenerics","Operator","OperatorInstance","Path","PortIndexValue","Pull","Push","add_statement","arguments","as_code","as_error_message_string","assert_valid","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_hfcode","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","combine","data","data","data","default","default","default","default","default","default","degree_in","degree_out","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","edge","edge","edge_ids","edge_ids","edge_ports","edges","edges","eliminate_extra_unions_tees","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hfcode","from_ported","generic_args","generics","get_operator_generics","graph_algorithms","hash","hash","hash","input_ports","insert_edge","insert_edge","insert_intermediate_node","insert_intermediate_vertex","insert_node","insert_node_op_inst","insert_node_op_insts_all","insert_subgraph","into","into","into","into","into","into","into","into","into","into","into","is_specified","max_stratum","mermaid_string_flat","new","new","new","node","node_color","node_color_map","node_degree_in","node_degree_out","node_ids","node_op_inst","node_predecessor_edges","node_predecessor_nodes","node_predecessors","node_subgraph","node_successor_edges","node_successor_nodes","node_successors","nodes","op_constraints","ops","output_ports","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_graph","persistence_args","predecessor_edges","predecessor_vertices","predecessors","remove_from_subgraph","remove_intermediate_node","remove_intermediate_vertex","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_subgraph_stratum","span","span","subgraph","subgraph_ids","subgraph_stratum","subgraphs","successor_edges","successor_vertices","successors","surface_syntax_string","to_dot","to_mermaid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_pretty_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_args","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","write_dot","write_graph","write_mermaid","write_mermaid_flat","write_surface_syntax","dst_span","src_span","scc_kosaraju","topo_sort","Control","DelayType","DependsOnArgs","Filter","Fixed","Flatten","FlowProperties","FlowPropertyVal","Fold","IDENTITY_WRITE_FN","KeyedFold","LatticeFold","Map","MultiIn","MultiOut","NULL_WRITE_FN","No","OPERATORS","OperatorCategory","OperatorConstraints","OperatorWriteOutput","Persistence","Persistence","PortListSpec","Preserve","RANGE_0","RANGE_1","RANGE_ANY","RangeTrait","Sink","Source","Static","Stratum","Tick","Tick","Variadic","WriteContextArgs","WriteFn","Yes","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","categories","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","contains","context","default","default","default","description","deserialize","deterministic","end_bound","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","find_node_op_constraints","find_op_op_constraints","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hard_range_inn","hard_range_out","hash","human_string","hydroflow","ident","identity_write_iterator_fn","inconsistency_tainted","input_delaytype_fn","inputs","into","into","into","into","into","into","into","into","into","is_external_input","is_pull","make_ident","monotonic","name","name","node_id","null_write_iterator_fn","num_args","op_inst","op_name","op_span","operator_lookup","outputs","partial_cmp","partial_cmp","partial_cmp","persistence_args","ports_inn","ports_out","properties","root","serialize","soft_range_inn","soft_range_out","start_bound","subgraph_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_args","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_fn","write_iterator","write_iterator_after","write_prologue","HfCode","HfStatement","IndexInt","Indexing","Int","Link","Name","Named","NamedHfStatement","Operator","Operator","Paren","Path","Pipeline","Pipeline","PipelineLink","PipelineParen","PortIndex","Ported","args","args","arrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bracket_token","clone","clone","clone","clone_into","clone_into","clone_into","cmp","eq","equals","equivalent","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","hash","index","inn","inner","into","into","into","into","into","into","into","into","into","into","into","lhs","name","name","name_string","out","paren_token","paren_token","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","partial_cmp","path","pipeline","pipeline","rhs","span","span","span","span","span","span","span","span","span","span","span","span","statements","to_owned","to_owned","to_owned","to_pretty_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_arguments","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","PrettyRowCol","PrettySpan","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","UnionFind","borrow","borrow_mut","clone","clone_into","default","find","from","into","new","same_set","to_owned","try_from","try_into","type_id","union","with_capacity"],"q":[[0,"hydroflow_lang"],[5,"hydroflow_lang::diagnostic"],[74,"hydroflow_lang::graph"],[349,"hydroflow_lang::graph::Node"],[351,"hydroflow_lang::graph::graph_algorithms"],[353,"hydroflow_lang::graph::ops"],[546,"hydroflow_lang::parse"],[715,"hydroflow_lang::pretty_span"],[735,"hydroflow_lang::union_find"]],"d":["","Graph representation stages for Hydroflow graphs.","AST for surface syntax, modelled on <code>syn</code>’s ASTs.","","","","An error.","A help message.","","A note.","","A warning.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computation (yellow)","A directed multigraph where an vertex’s inbound and …","","","ID to identify an edge.","ID to identify a node (operator or handoff) in …","ID to identify a subgraph in <code>HydroflowGraph</code>.","","Handoff (grey) – not a color for operators, inserted …","A graph representing a hydroflow dataflow graph (with or …","","","","","","","Helper struct for <code>PortIndex</code> which keeps span information …","Pull (green)","Push (blue)","Add a single <code>HfStatement</code> line to this <code>HydroflowGraph</code>.","Arguments provided by the user into the operator as …","Emit this <code>HydroflowGraph</code> as runnable Rust source code …","","Assert that <code>self</code> is in a consistent state, for debugging. …","","","","","","","","","","","","","","","","","","","","","","","Build into an unpartitioned <code>HydroflowGraph</code>, returning a …","","","","","","","","","","","","","","","","","","","","","","","","","Return <code>Err(self)</code> if there is a conflict.","","","","","","","","","","The degree (number of edges/vertices) going into <code>v</code>, i.e. …","The degree (number of edges/vertices) coming out of <code>v</code>, …","","","","","","","","","Get the source and destination vertex IDs for the given …","Get the <code>src</code> and <code>dst</code> for an edge: …","Return an iterator over all edge IDs <code>E</code>.","Iterator of all edge IDs <code>GraphEdgeId</code>.","Get the source and destination ports for an edge: …","Return an iterator over all edges in form <code>(E, (V, V))</code>.","Iterator over all edges: …","Removes missing unions and tees. Must be applied BEFORE …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Operator generic (type or lifetime) arguments.","Generic arguments.","","","","","","Port values used as this operator’s input.","Creates an edge going from <code>src</code> to <code>dst</code> and returns the edge …","Insert an edge between nodes thru the given ports.","Inserts a node between two existing nodes connected by the …","For an <code>edge</code> from <code>A --&gt; B</code>, insert a new vertex <code>V</code> along that …","Insert a node, assigning the given varname.","Insert an operator instance for the given node. Panics if …","Assign all operator instances if not set. Write diagnostic …","Create a subgraph consisting of <code>node_ids</code>. Returns an error …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the the stratum number of the largest (latest) …","Convert into a mermaid graph. Ignores subgraphs.","Creates an empty <code>DiMulGraph</code>.","Create a new empty graph builder.","Create a new empty <code>HydroflowGraph</code>.","Get a node with its operator instance (if applicable).","Determine op color based on in and out degree. If linear …","Color mode (pull vs. push, handoff vs. comp) for nodes. …","Degree into a node, i.e. the number of predecessors.","Degree out of a node, i.e. the number of successors.","Iterator of node IDs <code>GraphNodeId</code>.","Get the <code>OperatorInstance</code> for a given node. Node must be an …","Predecessor edges, iterator of <code>GraphEdgeId</code> of incoming …","Predecessor edges, iterator of <code>GraphNodeId</code>.","Predecessors, iterator of <code>(GraphEdgeId, GraphNodeId)</code> of …","Get subgraph for node.","Successor edges, iterator of <code>GraphEdgeId</code> of outgoing edges.","Successor nodes, iterator of <code>GraphNodeId</code>.","Successors, iterator of <code>(GraphEdgeId, GraphNodeId)</code> of …","Iterator over <code>(GraphNodeId, &amp;Node)</code> pairs.","Name of the operator (will match <code>OperatorConstraints::name</code>…","","Port values used as this operator’s output.","","","","","","","Lifetime persistence arguments. Corresponds to a prefix of …","Return an iterator of all edge IDs going into <code>v</code>.","Return an iterator of all predecessor vertex IDs of <code>v</code>.","Return an iterator of all predecessor edge IDs <em>and</em> vertex …","Removes a node from its subgraph. Returns true if the node …","Remove the node <code>node_id</code> but preserves and connects the …","For a vertex with one incoming edge and one outgoing edge, …","","","","","","","","","Set subgraph’s stratum number, returning the old value …","","","Nodes belonging to the given subgraph.","Iterator over all subgraph IDs.","Gets the stratum nubmer of the subgraph.","Iterator over all subgraphs, ID and members: …","Return an iterator of all edge IDs coming out of <code>v</code>.","Return an iterator of all successor vertex IDs of <code>v</code>.","Return an iterator of all successor edge IDs <em>and</em> vertex …","Convert back into surface syntax.","Writes this graph as DOT (graphviz) into a string.","Writes this graph as mermaid into a string.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type persistence arguments. Corersponds to a (suffix) of …","","","","","","","","","","","","Creates a <code>DiMulGraph</code> with pre-allocated memory for <code>capacity</code>…","Writes this graph as DOT (graphviz) into the given <code>Write</code>.","Write out this <code>HydroflowGraph</code> using the given <code>GraphWrite</code>. …","Writes this graph as mermaid into the given <code>Write</code>.","Convert into a mermaid graph. Ignores subgraphs.","Convert back into surface syntax.","","","","","","","","","","","","","","","","","","","","","","","Operator categories, for docs.","An instance of this struct represents a single hydroflow …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Operator categories, for docs.","","","","","","","","","","","","","","","","","<code>context</code> ident, the name of the provided …","","","","Human description, for docs.","","Is the flow deterministic.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Input argument range required to not show an error.","Output argument range required to not show an error.","","","<code>df</code> ident, the name of the …","Ident the iterator or pullerator should be assigned to.","","Has inconsistency been introduced.","Determines if this input must be preceeded by a stratum …","Input operator idents (used for pull).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If this operator receives external inputs and therefore …","If a pull iterator (true) or pusherator (false) should be …","","Is the flow monotonic.","Human-readible heading name, for docs.","Operator’s name.","Node ID identifying this operator in the flat or …","","Number of arguments i.e. <code>operator(a, b, c)</code> has <code>num_args = 3</code>…","Operator instance arguments object.","Operator name.","The source span of this operator.","","Output operator idents (used for push).","","","","How many persistence lifetime arguments can be provided.","What named or numbered input ports to expect?","What named or numbered output ports to expect?","Monotonicity preservation properties, for analysis.","<code>hydroflow</code> crate name for <code>use #root::something</code>.","","Input argument range required to not show a warning.","Output argument range required to not show an warning.","","Subgraph ID in which this operator is contained.","","","","","","","","","","","","","","","","","","","","","","","","","How many generic type arguments can be provided.","","","","","","","","","","Emit code in multiple locations. See <code>OperatorWriteOutput</code>.","Iterator (or pusherator) code inside the subgraphs. The …","Code which runs after iterators have been run. Mainly for …","Code which runs once outside the subgraph to set up any …","","","","","","","","","","","","","","","","","","Port can either be an int or a name (path).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Output the operator as a formatted string using …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper struct which displays the span as <code>row:col</code> for human …","Helper struct which displays the span as <code>path:row:col</code> for …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,0,1,0,1,1,3,4,1,3,4,1,3,4,1,3,4,1,4,1,3,4,3,1,1,1,3,3,3,4,4,1,3,3,4,4,1,1,3,4,1,3,3,4,3,1,4,1,3,4,3,3,1,3,4,3,3,4,1,3,4,1,3,4,1,3,4,0,37,0,27,0,0,0,0,34,37,0,27,0,0,34,0,27,0,37,37,22,35,24,27,29,29,22,24,31,32,33,34,35,36,37,27,29,22,24,31,32,33,34,35,36,37,27,22,0,29,31,32,33,34,35,36,37,27,29,31,32,33,34,35,36,37,27,31,32,33,37,27,27,31,32,33,29,22,24,31,32,33,29,29,29,24,31,32,33,34,37,27,29,24,29,24,24,29,24,0,31,32,33,37,27,31,32,33,37,27,29,22,24,31,32,33,34,35,36,37,27,29,29,22,22,24,31,31,32,32,33,33,34,35,36,37,27,27,22,27,36,35,0,0,31,32,33,35,29,24,24,29,24,24,24,24,29,22,24,31,32,33,34,35,36,37,27,27,24,24,29,22,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,35,0,35,31,32,33,37,27,0,36,29,29,29,24,24,29,29,24,31,32,33,34,37,27,24,34,27,24,24,24,24,29,29,29,24,24,24,29,31,32,33,34,35,36,37,27,34,29,22,24,31,32,33,34,35,36,37,27,29,22,24,31,32,33,34,35,36,37,27,36,29,22,24,31,32,33,34,35,36,37,27,29,24,24,24,24,24,95,95,0,0,69,0,65,69,96,69,0,0,69,0,69,69,69,69,69,0,65,0,0,0,0,0,69,0,65,0,0,0,0,69,69,68,64,64,68,96,0,0,65,96,73,64,65,66,71,67,68,69,96,73,64,65,66,71,67,68,69,73,64,65,66,67,68,69,64,65,66,67,68,69,64,68,69,97,67,65,66,71,69,68,66,97,64,65,66,68,69,64,65,66,68,69,0,0,73,64,65,66,68,69,96,73,64,65,66,71,67,68,69,73,73,69,97,67,67,0,66,73,67,96,73,64,65,66,71,67,68,69,73,67,67,66,69,73,67,0,73,67,67,67,0,67,64,68,69,73,73,73,73,67,68,73,73,97,67,64,65,66,67,68,69,96,73,64,65,66,71,67,68,69,96,73,64,65,66,71,67,68,69,73,96,73,64,65,66,71,67,68,69,73,71,71,71,0,0,0,0,45,84,84,23,0,0,84,84,45,0,23,0,0,0,0,48,48,87,30,23,83,84,47,86,87,88,45,48,79,30,23,83,84,47,86,87,88,45,48,79,88,45,48,79,45,48,79,79,79,83,79,45,79,30,23,83,84,47,86,87,88,45,48,79,79,88,47,47,30,23,83,84,47,86,87,88,45,48,79,87,48,83,48,47,86,48,30,23,83,84,47,86,87,88,45,48,79,79,48,83,86,87,30,23,83,84,47,86,87,88,45,48,79,79,30,45,48,79,48,30,23,83,84,47,86,87,88,45,48,79,30,23,83,84,47,86,87,88,45,48,79,30,23,83,84,47,86,87,88,45,48,79,48,30,23,83,84,47,86,87,88,45,48,79,79,0,0,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,91,92,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[[[3,[2]]],[[3,[2]]]],[4,4],[[]],[[]],[[]],[[1,1],5],0,[6,[[7,[1]]]],[6,[[7,[[3,[8]]]]]],[6,[[7,[4]]]],[3],[[1,1],9],[[],9],[[1,10],11],[[[3,[4]],10],11],[[3,10],11],[[[3,[12]],10],11],[[4,10],11],[[4,10],11],[[]],[13,3],[[]],[[]],[14,4],[[1,15]],[[]],[[]],[[]],[1,9],[3,9],0,0,0,[[1,1],[[16,[5]]]],0,[[1,17],7],[[[3,[18]],17],7],[[4,17],7],0,[[14,1,[20,[19]]],3],[[]],[[]],[[]],[3,[[3,[4]]]],[[],19],[[],19],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],21],[[],21],[[],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[22,23]],0,[[24,25,9,[26,[3]]],25],[27,19],[[[29,[28,28]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22],[[30,25]],[[[29,[[0,[28,2]],[0,[28,2]]]]],[[29,[[0,[28,2]],[0,[28,2]]]]]],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[27,27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,31],5],[[32,32],5],[[33,33],5],[[37,37],5],[[27,27],5],[[27,27],[[7,[27,27]]]],[31,38],[32,38],[33,38],[[],[[29,[28,28]]]],[[],22],[[],24],[[],31],[[],32],[[],33],[[[29,[28,28]],28],39],[[[29,[28,28]],28],39],[6,[[7,[[29,[[0,[28,8]],[0,[28,8]]]]]]]],[6,[[7,[24]]]],[6,[[7,[31]]]],[6,[[7,[32]]]],[6,[[7,[33]]]],[6,[[7,[34]]]],[6,[[7,[37]]]],[6,[[7,[27]]]],[[[29,[28,28]],28],16],[[24,32]],[[[29,[28,28]]],[[40,[28]]]],[24,[[40,[32]]]],[[24,32]],[[[29,[28,28]]],[[0,[41,42,43,2,12]]]],[24,[[0,[41,42,43,2,12]]]],[24],[[31,31],9],[[32,32],9],[[33,33],9],[[37,37],9],[[27,27],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[29,[[0,[28,12]],[0,[28,12]]]],10],11],[[22,10],11],[[24,10],11],[[31,10],11],[[32,10],11],[[33,10],11],[[34,10],11],[[35,10],11],[[36,10],11],[[37,10],11],[[27,10],11],[[]],[[[44,[28]]],[[29,[28,28]]]],[[]],[30,22],[[]],[38,31],[[]],[38,32],[[]],[38,33],[[]],[[]],[[]],[[]],[[]],[[]],[45,27],[30,22],[[[47,[46]]]],0,0,[[[26,[3]],48],36],0,[[31,15]],[[32,15]],[[33,15]],0,[[[29,[28,28]],28,28],28],[[24,31,27,31,27],32],[[24,32,34]],[[[29,[28,28]],28,28],16],[[24,34,[16,[49]]],31],[[24,31,35]],[[24,[26,[3]]]],[[24,[26,[31]]],[[7,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,9],[24,[[16,[39]]]],[24,19],[[],[[29,[28,28]]]],[[],22],[[],24],[[24,31],34],[[9,39,39],[[16,[37]]]],[24,[[50,[31,37]]]],[[24,31],39],[[24,31],39],[24,[[40,[31,34]]]],[[24,31],[[16,[35]]]],[[24,31],[[0,[41,51,42,43,2,12]]]],[[24,31],[[0,[41,51,42,43,2,12]]]],[[24,31],[[0,[41,51,42,43,2,12]]]],[[24,31],[[16,[33]]]],[[24,31],[[0,[41,51,42,43,2,12]]]],[[24,31],[[0,[41,51,42,43,2,12]]]],[[24,31],[[0,[41,51,42,43,2,12]]]],[24,[[52,[31,34]]]],0,0,0,[[31,31],[[16,[5]]]],[[32,32],[[16,[5]]]],[[33,33],[[16,[5]]]],[[37,37],[[16,[5]]]],[[27,27],[[16,[5]]]],[24,[[7,[24,3]]]],0,[[[29,[28,28]],28],[[54,[[53,[28]]]]]],[[[29,[28,28]],28],[[0,[41,51,42,43,2,12]]]],[[[29,[28,28]],28],[[0,[41,51,42,43,2,12]]]],[[24,31],9],[[24,31]],[[[29,[28,28]],28],16],[[[29,[[0,[28,18]],[0,[28,18]]]],17],7],[[24,17],7],[[31,17],7],[[32,17],7],[[33,17],7],[[34,17],7],[[37,17],7],[[27,17],7],[[24,33,39],[[16,[39]]]],[34,14],[27,14],[[24,33],[[26,[31]]]],[24,[[40,[33,[26,[31]]]]]],[[24,33],[[16,[39]]]],[24,[[52,[33,[26,[31]]]]]],[[[29,[28,28]],28],[[54,[[53,[28]]]]]],[[[29,[28,28]],28],[[0,[41,51,42,43,2,12]]]],[[[29,[28,28]],28],[[0,[41,51,42,43,2,12]]]],[24,19],[24,19],[24,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[34,[[56,[55]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[39,[[29,[28,28]]]],[[24,57],11],0,[[24,57],11],[[24,57],11],[[24,57],11],0,0,[[58,59,59],[[63,[[0,[60,61,62]],[0,[60,61,62]]]]]],[[58,59],[[26,[[0,[60,61,62]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[[]],[[]],[[]],[[]],[[]],[[]],[[64,64],5],[[68,68],5],[[69,69],5],[[[70,[[70,[[70,[[70,[70]]]]]]]]],9],0,[[],65],[[],66],[[],71],[69,55],[6,[[7,[68]]]],0,[[],72],[[64,64],9],[[65,65],9],[[66,66],9],[[68,68],9],[[69,69],9],[[],9],[[],9],[[],9],[[],9],[[],9],[34,[[16,[73]]]],[48,[[16,[73]]]],[[73,10],11],[[64,10],11],[[65,10],11],[[66,10],11],[[68,10],11],[[69,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[69,15]],[[],19],0,0,[67,25],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[67,[74,[55]]],49],0,[69,55],0,0,[67,25],0,0,0,0,[[],[[75,[55,73]]]],0,[[64,64],[[16,[5]]]],[[68,68],[[16,[5]]]],[[69,69],[[16,[5]]]],0,0,0,0,0,[[68,17],7],0,0,[[],72],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],0,[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[48,[[78,[76,77]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[45,45],[48,48],[79,79],[[]],[[]],[[]],[[79,79],5],[[79,79],9],0,[[],9],[[45,10],11],[[79,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[79,15]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[48,80],0,[48,19],0,0,0,[81,[[82,[30]]]],[81,[[82,[23]]]],[81,[[82,[83]]]],[81,[[82,[84]]]],[81,[[82,[[47,[85]]]]]],[81,[[82,[86]]]],[81,[[82,[87]]]],[81,[[82,[88]]]],[81,[[82,[45]]]],[81,[[82,[48]]]],[81,[[82,[79]]]],[[79,79],[[16,[5]]]],0,0,0,0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],0,0,[[]],[[]],[[]],[48,19],[[30,25]],[[23,25]],[[83,25]],[[84,25]],[[[47,[89]],25]],[[86,25]],[[87,25]],[[88,25]],[[45,25]],[[48,25]],[[79,25]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[48,[[16,[[78,[90,77]]]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,0,0,[[]],[[]],[[]],[[]],[[91,10],11],[[92,10],11],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],7],[[],7],[[],7],[[],7],[[],21],[[],21],0,[[]],[[]],[[[93,[[0,[28,2]]]]],[[93,[[0,[28,2]]]]]],[[]],[[],[[93,[[0,[28,94]]]]]],[[[93,[28]],28],28],[[]],[[]],[[],[[93,[28]]]],[[[93,[28]],28,28],9],[[]],[[],7],[[],7],[[],21],[[[93,[28]],28,28]],[39,[[93,[28]]]]],"c":[],"p":[[4,"Level"],[8,"Clone"],[3,"Diagnostic"],[3,"SerdeSpan"],[4,"Ordering"],[8,"Deserializer"],[4,"Result"],[8,"Deserialize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Error"],[3,"Span"],[8,"Hasher"],[4,"Option"],[8,"Serializer"],[8,"Serialize"],[3,"String"],[8,"Into"],[3,"TypeId"],[3,"FlatGraphBuilder"],[4,"HfStatement"],[3,"HydroflowGraph"],[3,"TokenStream"],[3,"Vec"],[4,"PortIndexValue"],[8,"Key"],[3,"DiMulGraph"],[3,"HfCode"],[3,"GraphNodeId"],[3,"GraphEdgeId"],[3,"GraphSubgraphId"],[4,"Node"],[3,"OperatorInstance"],[3,"OpInstGenerics"],[4,"Color"],[3,"KeyData"],[15,"usize"],[3,"Keys"],[8,"Iterator"],[8,"ExactSizeIterator"],[8,"FusedIterator"],[3,"SlotMap"],[4,"PortIndex"],[8,"Spanned"],[3,"Ported"],[3,"Operator"],[3,"Ident"],[3,"SparseSecondaryMap"],[8,"DoubleEndedIterator"],[3,"Iter"],[3,"Iter"],[3,"Copied"],[15,"str"],[4,"Cow"],[8,"Write"],[8,"IntoIterator"],[8,"FnMut"],[8,"Copy"],[8,"Eq"],[8,"Ord"],[3,"BTreeMap"],[4,"DelayType"],[4,"FlowPropertyVal"],[3,"FlowProperties"],[3,"WriteContextArgs"],[4,"Persistence"],[4,"OperatorCategory"],[8,"PartialOrd"],[3,"OperatorWriteOutput"],[4,"Bound"],[3,"OperatorConstraints"],[8,"AsRef"],[3,"HashMap"],[4,"Expr"],[3,"Comma"],[3,"Punctuated"],[3,"IndexInt"],[3,"Path"],[6,"ParseStream"],[6,"Result"],[3,"NamedHfStatement"],[4,"Pipeline"],[8,"Parse"],[3,"PipelineParen"],[3,"PipelineLink"],[3,"Indexing"],[8,"ToTokens"],[4,"GenericArgument"],[3,"PrettySpan"],[3,"PrettyRowCol"],[3,"UnionFind"],[8,"Default"],[13,"Handoff"],[4,"PortListSpec"],[8,"RangeTrait"]]},\
"hydroflow_macro":{"doc":"","t":"XOOOX","n":["hydroflow_main","hydroflow_parser","hydroflow_syntax","hydroflow_syntax_noemit","hydroflow_test"],"q":[[0,"hydroflow_macro"]],"d":["","Parse Hydroflow “surface syntax” without emitting code.","Create a Hydroflow instance using Hydroflow’s custom “…","<code>hydroflow_syntax!</code> but will not emit any diagnostics …",""],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"lattices":{"doc":"The <code>lattices</code> crate provides ergonomic and compsable …","t":"DIDDIDIDIDDDLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLMAKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMDGGGGGGLLLLLLLLLLLLLLLLLLLLLDGGGGGGLLLLLLLLLLLLLLLLLLLLLFFFFF","n":["Bottom","ConvertFrom","DomPair","Immut","LatticeOrd","Max","Merge","Min","NaiveLatticeOrd","Pair","Seq","Top","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cc_traits","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","collections","default","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","key","map_union","merge","merge","merge","merge","merge","merge","merge","merge","merge","merge_owned","naive_cmp","new","new","new","new","new","new","new","new","new_from","new_from","new_from","new_from","new_from","new_from","new_from","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_union","test","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","val","ArrayMap","ArraySet","SingletonMap","SingletonSet","VecMap","VecSet","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get","get","get","get","get","get","get_key_value","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_key_value_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","iter","iter","iter","iter","iter","iter","iter","iter","iter_mut","iter_mut","iter_mut","iter_mut","iter_mut","keys","keys","len","len","len","len","len","len","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_item_mut","upcast_item_mut","upcast_item_mut","upcast_item_mut","upcast_item_mut","upcast_item_mut","upcast_item_ref","upcast_item_ref","upcast_item_ref","upcast_item_ref","upcast_item_ref","upcast_item_ref","upcast_key_ref","upcast_key_ref","upcast_key_ref","vals","vals","MapUnion","MapUnionArrayMap","MapUnionBTreeMap","MapUnionHashMap","MapUnionOption","MapUnionSingletonMap","MapUnionVec","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","equivalent","fmt","from","from","into","merge","new","new_from","partial_cmp","serialize","to_owned","try_from","try_into","type_id","SetUnion","SetUnionArray","SetUnionBTreeSet","SetUnionHashSet","SetUnionOption","SetUnionSingletonSet","SetUnionVec","borrow","borrow_mut","clone","clone_into","default","deserialize","eq","equivalent","fmt","from","from","into","merge","new","new_from","partial_cmp","serialize","to_owned","try_from","try_into","type_id","cartesian_power","check_all","check_lattice_ord","check_lattice_properties","check_partial_ord_properties"],"q":[[0,"lattices"],[193,"lattices::collections"],[364,"lattices::map_union"],[392,"lattices::set_union"],[420,"lattices::test"]],"d":["Wraps a lattice in <code>Option</code>, treating <code>None</code> as a new bottom …","Same as <code>From</code> but for lattices.","Dominating pair compound lattice.","A <code>Immut</code> lattice that will runtime panic if a merge between …","Trait for lattice partial order comparison PartialOrd is …","A totally ordered max lattice. Merging returns the larger …","Trait for lattice merge (AKA “join” or “least upper …","A totally ordered min lattice. Merging returns the smaller …","Naive lattice compare, based on the <code>Merge::merge</code> function.","Pair compound lattice.","Sequence compound lattice.","Wraps a lattice in <code>Option</code>, treating <code>None</code> as a new top …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Simple singleton or array collection with <code>cc_traits</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert from the <code>Other</code> lattice into <code>Self</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Create a new <code>Max</code> lattice instance from an <code>Into&lt;T&gt;</code> value.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The <code>Key</code> of the  dominating pair lattice, usually a …","Module containing the <code>MapUnion</code> lattice and aliases for …","Merge <code>other</code> into the <code>self</code> lattice.","","","","","","","","","Merge <code>this</code> and <code>delta</code> together, returning the new value.","Naive compare based on the <code>Merge::merge</code> method. This …","Create a new <code>Bottom</code> lattice instance from a value.","Create a new <code>Bottom</code> lattice instance from a value.","Create a <code>DomPair</code> from the given <code>Key</code> and <code>Val</code>.","Create a new <code>Immut</code> lattice instance from a value.","Create a new <code>Max</code> lattice instance from a <code>T</code>.","Create a new <code>Min</code> lattice instance from a <code>T</code>.","Create a <code>Pair</code> from the given values.","Create a new <code>Seq</code> from a <code>Vec</code> of <code>Lat</code> instances.","Create a new <code>Bottom</code> lattice instance from a value using …","Create a new <code>Bottom</code> lattice instance from a value using …","Create a <code>DomPair</code> from the given <code>Into&lt;Key&gt;</code> and <code>Into&lt;Val&gt;</code>.","Create a new <code>Immut</code> lattice instance from a value using <code>Into</code>…","Create a new <code>Min</code> lattice instance from an <code>Into&lt;T&gt;</code> value.","Create a <code>Pair</code> from the given values, using <code>Into</code>.","Create a new <code>Seq</code> from an <code>Into&lt;Vec&lt;Lat&gt;&gt;</code>.","","","","","","","","","","","","","","","","","Module containing the <code>SetUnion</code> lattice and aliases for …","Helper test utils to test lattice implementation …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Val</code> of the dominating pair lattice.","An array wrapper representing a fixed-size map.","An array wrapper representing a fixed-size set (modulo …","A key-value entry wrapper representing a singleton map.","A wrapper around an item, representing a singleton set.","A <code>Vec</code>-wrapper representing a naively implemented map.","A <code>Vec</code>-wrapper representing a naively-implemented set.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Keys, should be the same length as and correspond 1:1 to …","Keys, corresponding 1:1 with <code>vals</code>.","","","","","","","Create a new <code>VecMap</code> from the separate <code>keys</code> and <code>vals</code> vecs.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Vals, should be the same length as and correspond 1:1 to …","Values, corresponding 1:1 with <code>keys</code>.","Map-union compound lattice.","Array-backed <code>MapUnion</code> lattice.","<code>std::collections::BTreeMap</code>-backed <code>MapUnion</code> lattice.","<code>std::collections::HashMap</code>-backed <code>MapUnion</code> lattice.","<code>Option</code>-backed <code>MapUnion</code> lattice.","<code>crate::collections::SingletonMap</code>-backed <code>MapUnion</code> lattice.","<code>Vec</code>-backed <code>MapUnion</code> lattice.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create a new <code>MapUnion</code> from a <code>Map</code>.","Create a new <code>MapUnion</code> from an <code>Into&lt;Map&gt;</code>.","","","","","","","Set-union lattice.","<code>crate::collections::ArraySet</code>-backed <code>SetUnion</code> lattice.","<code>std::collections::BTreeSet</code>-backed <code>SetUnion</code> lattice.","<code>std::collections::HashSet</code>-backed <code>SetUnion</code> lattice.","<code>Option</code>-backed <code>SetUnion</code> lattice.","<code>crate::collections::SingletonSet</code>-backed <code>SetUnion</code> lattice.","<code>Vec</code>-backed <code>SetUnion</code> lattice.","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Create a new <code>SetUnion</code> from a <code>Set</code>.","Create a new <code>SetUnion</code> from an <code>Into&lt;Set&gt;</code>.","","","","","","","Returns an iterator of <code>N</code>-length arrays containing all …","Helper which calls <code>check_lattice_ord</code>, …","Check that the lattice’s <code>PartialOrd</code> implementation …","Check lattice associativity, commutativity, and …","Checks <code>PartialOrd</code>, <code>PartialEq</code>, and <code>Eq</code>’s reflexivity, …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,0,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,6,7,0,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,21,2,2,3,3,4,4,5,5,6,6,6,7,7,8,8,9,9,2,3,4,5,6,7,8,9,4,0,23,2,3,4,5,6,7,8,9,23,61,2,3,4,5,6,7,8,9,2,3,4,5,7,8,9,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,0,0,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,2,3,4,5,6,7,8,9,4,0,0,0,0,0,0,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,31,31,32,33,33,33,34,34,35,35,36,36,31,32,33,34,35,36,32,34,36,32,34,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,31,32,33,34,34,35,36,36,31,32,33,34,36,32,36,31,32,33,34,35,36,32,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,31,32,33,34,35,36,32,34,36,32,36,0,0,0,0,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[[[4,[1,1]]],[[4,[1,1]]]],[[[5,[1]]],[[5,[1]]]],[[[6,[1]]],[[6,[1]]]],[[[7,[1]]],[[7,[1]]]],[[[8,[1,1]]],[[8,[1,1]]]],[[[9,[1]]],[[9,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[10]],[6,[10]]],11],[[[7,[10]],[7,[10]]],11],0,[[],2],[[],3],[[],[[4,[12,12]]]],[[],[[5,[12]]]],[[],[[6,[12]]]],[[],[[7,[12]]]],[[],[[8,[12,12]]]],[[],9],[13,[[15,[[2,[14]]]]]],[13,[[15,[[3,[14]]]]]],[13,[[15,[[4,[14,14]]]]]],[13,[[15,[[5,[14]]]]]],[13,[[15,[[6,[14]]]]]],[13,[[15,[[7,[14]]]]]],[13,[[15,[[8,[14,14]]]]]],[13,[[15,[[9,[14]]]]]],[[[2,[16]],2],17],[[[3,[16]],3],17],[[[4,[16,16]],4],17],[[[5,[16]],5],17],[[[6,[16]],[6,[16]]],17],[[[7,[16]],[7,[16]]],17],[[[8,[16,16]],8],17],[[[9,[16]],9],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[2,[18]],19],20],[[[3,[18]],19],20],[[[4,[18,18]],19],20],[[[5,[18]],19],20],[[[6,[18]],19],20],[[[7,[18]],19],20],[[[8,[18,18]],19],20],[[[9,[18]],19],20],[[]],[2,[[2,[21]]]],[[]],[3,[[3,[21]]]],[[]],[[]],[4,[[4,[21,21]]]],[5,5],[[]],[22,6],[[]],[6,6],[7,7],[[]],[8,[[8,[21,21]]]],[[]],[[]],[9,[[9,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],17],[[[2,[[0,[23,21]]]],2],17],[[[3,[[0,[23,21]]]],3],17],[[[4,[[0,[23,21,24]],[0,[23,21]]]],4],17],[[[5,[16]],5],17],[[[6,[10]],[6,[10]]],17],[[[7,[10]],[7,[10]]],17],[[[8,[23,23]],8],17],[[[9,[[0,[23,21]]]],9],17],[25,25],[[],[[26,[11]]]],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[27,9],[22,2],[22,3],[[22,22],4],[22,5],[22,7],[[22,22],8],[[[22,[27]]],9],[[[2,[24]],2],[[26,[11]]]],[[[3,[24]],3],[[26,[11]]]],[[[4,[24,24]],4],[[26,[11]]]],[[[5,[16]],5],[[26,[11]]]],[[[6,[24]],[6,[24]]],[[26,[11]]]],[[[7,[24]],[7,[24]]],[[26,[11]]]],[[[8,[24,24]],8],[[26,[11]]]],[[[9,[24]],9],[[26,[11]]]],[[[2,[28]],29],15],[[[3,[28]],29],15],[[[4,[28,28]],29],15],[[[5,[28]],29],15],[[[6,[28]],29],15],[[[7,[28]],29],15],[[[8,[28,28]],29],15],[[[9,[28]],29],15],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[1]]],[[31,[1]]]],[[[32,[1,1]]],[[32,[1,1]]]],[[[33,[1]]],[[33,[1]]]],[[[34,[1,1]]],[[34,[1,1]]]],[[[35,[1]]],[[35,[1]]]],[[[36,[1,1]]],[[36,[1,1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[10]],[31,[10]]],11],[[[32,[10,10]],[32,[10,10]]],11],[[[33,[10]],[33,[10]]],11],[[[34,[10,10]],[34,[10,10]]],11],[[[35,[10]],[35,[10]]],11],[[[36,[10,10]],[36,[10,10]]],11],[[[31,[16]],[31,[16]]],17],[[[32,[16,16]],[32,[16,16]]],17],[[[33,[16]],[33,[16]]],17],[[[34,[16,16]],[34,[16,16]]],17],[[[35,[16]],[35,[16]]],17],[[[36,[16,16]],[36,[16,16]]],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[31,[18]],19],20],[[[32,[18,18]],19],20],[[[33,[18]],19],20],[[[34,[18,18]],19],20],[[]],[27,31],[[]],[[]],[[],33],[37],[[],34],[[]],[[]],[38,35],[38,36],[[]],[[[31,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[32,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[33,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[34,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[35,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[36,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[32,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[34,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[36,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[32,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[34,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[36,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[31,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[32,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[33,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[34,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[35,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[36,[[40,[[0,[39,25]]]]]],[0,[39,25]]],26],[[[31,[41]],42]],[[[32,[41,41]],42]],[[[33,[41]],42]],[[[34,[41,41]],42]],[[[35,[41]],42]],[[[36,[41,41]],42]],[[]],[[]],[[]],[[]],[[]],[[]],[31],[32],[33],[34],[35],[36],[31,17],[32,17],[31],[32],[33],[34],[34],[35],[36],[36],[31],[32],[33],[34],[36],0,0,[31,43],[32,43],[33,43],[34,43],[35,43],[36,43],[[27,27],32],[[[31,[24]],[31,[24]]],[[26,[11]]]],[[[32,[24,24]],[32,[24,24]]],[[26,[11]]]],[[[33,[24]],[33,[24]]],[[26,[11]]]],[[[34,[24,24]],[34,[24,24]]],[[26,[11]]]],[[[35,[24]],[35,[24]]],[[26,[11]]]],[[[36,[24,24]],[36,[24,24]]],[[26,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[[44,[1]]],[[44,[1]]]],[[]],[[],[[44,[12]]]],[13,[[15,[[44,[14]]]]]],[[[44,[[0,[[45,[16]],46,47]]]],[44,[[0,[45,46,47]]]]],17],[[],17],[[[44,[18]],19],20],[[[44,[48]]],[[44,[[0,[49,50]]]]]],[[]],[[]],[[[44,[[0,[49,51,52]]]],[44,[48]]],17],[[],44],[22,44],[[[44,[[0,[[45,[24]],46,47]]]],[44,[[0,[45,46,47]]]]],[[26,[11]]]],[[[44,[28]],29],15],[[]],[[],15],[[],15],[[],30],0,0,0,0,0,0,0,[[]],[[]],[[[53,[1]]],[[53,[1]]]],[[]],[[],[[53,[12]]]],[13,[[15,[[53,[14]]]]]],[[[53,[[0,[54,55]]]],[53,[[0,[54,55]]]]],17],[[],17],[[[53,[18]],19],20],[[]],[[[53,[48]]],[[53,[50]]]],[[]],[[[53,[[0,[51,56]]]],[53,[48]]],17],[[],53],[22,53],[[[53,[[0,[54,55]]]],[53,[[0,[54,55]]]]],[[26,[11]]]],[[[53,[28]],29],15],[[]],[[],15],[[],15],[[],30],[57,[[0,[58,59,1]]]],[[[57,[[0,[60,61,[23,[[0,[60,61,[23,[[0,[60,61,[23,[[0,[60,61,23,1,39,18]]]],1,39,18]]]],1,39,18]]]],1,39,18]]]]]],[[[57,[[0,[60,61,18]]]]]],[[[57,[[0,[[23,[[0,[[23,[[0,[[23,[[0,[23,1,39,18]]]],1,39,18]]]],1,39,18]]]],1,39,18]]]]]],[[[57,[[0,[24,39,18]]]]]]],"c":[],"p":[[8,"Clone"],[3,"Bottom"],[3,"Top"],[3,"DomPair"],[3,"Immut"],[3,"Max"],[3,"Min"],[3,"Pair"],[3,"Seq"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"Deserializer"],[8,"Deserialize"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"ConvertFrom"],[8,"Into"],[8,"Merge"],[8,"PartialOrd"],[8,"Sized"],[4,"Option"],[3,"Vec"],[8,"Serialize"],[8,"Serializer"],[3,"TypeId"],[3,"VecSet"],[3,"VecMap"],[3,"SingletonSet"],[3,"SingletonMap"],[3,"ArraySet"],[3,"ArrayMap"],[15,"never"],[15,"array"],[8,"Eq"],[8,"Borrow"],[8,"Hash"],[8,"Hasher"],[15,"usize"],[3,"MapUnion"],[8,"Map"],[8,"MapIter"],[8,"SimpleKeyedRef"],[8,"IntoIterator"],[8,"Keyed"],[8,"FromIterator"],[8,"Extend"],[8,"GetMut"],[3,"SetUnion"],[8,"Set"],[8,"Iter"],[8,"Len"],[15,"slice"],[8,"Iterator"],[8,"ExactSizeIterator"],[8,"LatticeOrd"],[8,"NaiveLatticeOrd"]]},\
"multiplatform_test":{"doc":"","t":"X","n":["multiplatform_test"],"q":[[0,"multiplatform_test"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"pusherator":{"doc":"Pusherator generics and argument order conventions:","t":"DQQIQIILLLALALAAALLKALLALLAALKLALALLLLALDILLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLL","n":["InputBuild","Item","ItemOut","IteratorToPusherator","Output","Pusherator","PusheratorBuild","borrow","borrow_mut","default","demux","demux","filter","filter","filter_map","flatten","for_each","for_each","from","give","inspect","inspect","into","map","map","new","partition","pivot","pull_to_push","push_to","push_to","switch","switch","tee","tee","try_from","try_into","type_id","unzip","unzip","Demux","PusheratorList","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","Filter","FilterBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","FilterMap","FilterMapBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Flatten","FlattenBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","ForEach","borrow","borrow_mut","from","give","into","new","try_from","try_into","type_id","Inspect","InspectBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Map","MapBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Partition","PartitionBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Pivot","PivotBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","new","new","push_to","run","step","try_from","try_from","try_into","try_into","type_id","type_id","Switch","SwitchBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Tee","TeeBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id","Unzip","UnzipBuild","borrow","borrow","borrow_mut","borrow_mut","from","from","give","into","into","new","new","push_to","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"pusherator"],[40,"pusherator::demux"],[51,"pusherator::filter"],[71,"pusherator::filter_map"],[91,"pusherator::flatten"],[111,"pusherator::for_each"],[121,"pusherator::inspect"],[141,"pusherator::map"],[161,"pusherator::partition"],[181,"pusherator::pivot"],[202,"pusherator::switch"],[222,"pusherator::tee"],[242,"pusherator::unzip"]],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","A variadic list of Pusherators.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,9,10,0,10,0,0,1,1,1,0,10,0,10,0,0,0,10,1,9,0,10,1,0,10,1,0,0,34,10,1,0,10,0,10,1,1,1,0,10,0,0,16,16,16,16,16,16,16,16,16,0,0,17,5,17,5,17,5,17,17,5,17,5,5,17,5,17,5,17,5,0,0,18,19,18,19,18,19,18,18,19,18,19,19,18,19,18,19,18,19,0,0,21,22,21,22,21,22,21,21,22,21,22,22,21,22,21,22,21,22,0,23,23,23,23,23,23,23,23,23,0,0,24,6,24,6,24,6,24,24,6,24,6,6,24,6,24,6,24,6,0,0,25,7,25,7,25,7,25,25,7,25,7,7,25,7,25,7,25,7,0,0,26,27,26,27,26,27,26,26,27,26,27,27,26,27,26,27,26,27,0,0,29,8,29,8,29,8,29,8,29,8,8,29,29,29,8,29,8,29,8,0,0,31,11,31,11,31,11,31,31,11,31,11,11,31,11,31,11,31,11,0,0,32,12,32,12,32,12,32,32,12,32,12,12,32,12,32,12,32,12,0,0,33,15,33,15,33,15,33,33,15,33,15,15,33,15,33,15,33,15],"f":[0,0,0,0,0,0,0,[[]],[[]],[[],1],0,[[2,3,4]],0,[[2,3],[[5,[2,3]]]],0,0,0,[[2,3]],[[]],[[]],0,[[2,3],[[6,[2,3]]]],[[]],0,[[2,3],[[7,[2,3]]]],[[],1],0,0,[2,[[8,[2]]]],[9],[[1,9]],0,[[[0,[2,10]],9],[[11,[[0,[2,10]],9]]]],0,[[2,9],[[12,[2,9]]]],[[],13],[[],13],[[],14],0,[[[0,[2,10]],9],[[15,[[0,[2,10]],9]]]],0,0,[[]],[[]],[[]],[[[16,[3,4]]]],[[]],[[3,4],[[16,[3,4]]]],[[],13],[[],13],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[17,[9,3]]]],[[]],[[]],[[3,9],[[17,[9,3]]]],[[10,3],[[5,[10,3]]]],[[[5,[10,3]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[18,[9,3]]]],[[]],[[]],[[3,9],[[18,[9,3]]]],[[10,3],[[19,[10,3]]]],[[[19,[10,3]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[9,20]]]],[[]],[[]],[9,[[21,[9,20]]]],[10,[[22,[10]]]],[[[22,[10]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,[[]],[[]],[[]],[[[23,[3]]]],[[]],[3,[[23,[3]]]],[[],13],[[],13],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[9,3]]]],[[]],[[]],[[3,9],[[24,[9,3]]]],[[10,3],[[6,[10,3]]]],[[[6,[10,3]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[9,3]]]],[[]],[[]],[[3,9],[[25,[9,3]]]],[[10,3],[[7,[10,3]]]],[[[7,[10,3]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[9,9,3]]]],[[]],[[]],[[3,9,9],[[26,[9,9,3]]]],[[10,9,3],[[27,[10,9,3]]]],[[[27,[10,9,3]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[28,9],[[29,[28,9]]]],[28,[[8,[28]]]],[[[8,[28]],9]],[[[29,[28,9]]]],[[[29,[28,9]]],30],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[9,9]]]],[[]],[[]],[[9,9],[[31,[9,9]]]],[[10,9],[[11,[10,9]]]],[[[11,[10,9]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[32,[9,9]]]],[[]],[[]],[[9,9],[[32,[9,9]]]],[[10,9],[[12,[10,9]]]],[[[12,[10,9]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[9,9]]]],[[]],[[]],[[9,9],[[33,[9,9]]]],[[10,9],[[15,[10,9]]]],[[[15,[10,9]],9]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14]],"c":[],"p":[[3,"InputBuild"],[8,"Sized"],[8,"FnMut"],[8,"PusheratorList"],[3,"FilterBuild"],[3,"InspectBuild"],[3,"MapBuild"],[3,"PivotBuild"],[8,"Pusherator"],[8,"PusheratorBuild"],[3,"SwitchBuild"],[3,"TeeBuild"],[4,"Result"],[3,"TypeId"],[3,"UnzipBuild"],[3,"Demux"],[3,"Filter"],[3,"FilterMap"],[3,"FilterMapBuild"],[8,"IntoIterator"],[3,"Flatten"],[3,"FlattenBuild"],[3,"ForEach"],[3,"Inspect"],[3,"Map"],[3,"Partition"],[3,"PartitionBuild"],[8,"Iterator"],[3,"Pivot"],[15,"bool"],[3,"Switch"],[3,"Tee"],[3,"Unzip"],[8,"IteratorToPusherator"]]},\
"relalg":{"doc":"","t":"NNENNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Bool","ColRef","Datum","Eq","Int","Literal","Plus","ScalarExpr","String","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","eval","fmt","fmt","from","from","hash","hash","into","into","is_true","span","to_owned","to_owned","to_tokens","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"relalg"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[1,2,0,2,1,2,2,0,1,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1,2,2,1,2,1,2,1,2],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[],3],[[],3],[[2,[4,[1]]],1],[[1,5],6],[[2,5],6],[[]],[[]],[[1,7]],[[2,7]],[[]],[[]],[1,3],[[],8],[[]],[[]],[[2,9]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"c":[],"p":[[4,"Datum"],[4,"ScalarExpr"],[15,"bool"],[15,"slice"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[3,"Span"],[3,"TokenStream"],[4,"Result"],[3,"TypeId"]]},\
"variadics":{"doc":"Crate for macro-free variadic tuple metaprogramming.","t":"IQIIQIKKKOOOO","n":["Extend","Extended","Split","SplitPrefix","Suffix","Variadic","extend","split","split","var_args","var_expr","var_type","variadic_trait"],"q":[[0,"variadics"]],"d":["","","","","","","","","","Macro for pattern-matching with variadic tuples. This is …","Macro creating a variadic tuple value from a list of …","Macro creating a variadic tuple type from a list of types.","This macro generates a basic variadic trait where each …"],"i":[0,1,0,0,2,0,1,2,3,0,0,0,0],"f":[0,0,0,0,0,0,[[]],[[]],[[]],0,0,0,0],"c":[],"p":[[8,"Extend"],[8,"SplitPrefix"],[8,"Split"]]},\
"website_playground":{"doc":"","t":"DDDDDLLLLLLLLLLMFFMLLLLLMMLLLLLLLLFFLLLLLMMMMMFLLLLLMMLLLLLLLLLLLLLLL","n":["HydroflowOutput","HydroflowResult","JSDiagnostic","JSLineColumn","JSSpan","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","column","compile_datalog","compile_hydroflow","compiled","deserialize","deserialize","deserialize","deserialize","deserialize","diagnostics","end","from","from","from","from","from","from","from","from","init","init_datalog_boolean_demo","into","into","into","into","into","is_error","line","mermaid","message","output","send_datalog_boolean_demo","serialize","serialize","serialize","serialize","serialize","span","start","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"website_playground"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,4,6,7,8,9,4,6,7,8,9,4,0,0,9,4,6,7,8,9,8,6,4,4,6,6,7,7,8,9,0,0,4,6,7,8,9,7,4,9,7,8,0,4,6,7,8,9,7,6,4,6,7,8,9,4,6,7,8,9,4,6,7,8,9],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,2],[1,2],0,[3,[[5,[4]]]],[3,[[5,[6]]]],[3,[[5,[7]]]],[3,[[5,[8]]]],[3,[[5,[9]]]],0,0,[[]],[10,4],[11,6],[[]],[12,7],[[]],[[]],[[]],[[]],[13],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[13,14],[[15,[14]]]],[[4,16],5],[[6,16],5],[[7,16],5],[[8,16],5],[[9,16],5],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],17],[[],17],[[],17],[[],17],[[],17]],"c":[],"p":[[3,"String"],[3,"JsValue"],[8,"Deserializer"],[3,"JSLineColumn"],[4,"Result"],[3,"JSSpan"],[3,"JSDiagnostic"],[3,"HydroflowResult"],[3,"HydroflowOutput"],[3,"LineColumn"],[3,"Span"],[3,"Diagnostic"],[15,"str"],[15,"i32"],[4,"Option"],[8,"Serializer"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
