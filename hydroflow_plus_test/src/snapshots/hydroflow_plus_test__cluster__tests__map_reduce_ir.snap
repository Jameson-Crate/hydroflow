---
source: hydroflow_plus_test/src/cluster.rs
expression: builder.ir()
---
[
    ForEach {
        f: { use crate :: __staged :: cluster :: * ; | (string , count) | println ! ("{}: {}" , string , count) },
        input: PipelineOp {
            kind: "reduce_keyed",
            gen_pipeline: <function>,
            input: Persist(
                PipelineOp {
                    kind: "map",
                    gen_pipeline: <function>,
                    input: Network {
                        to_location: 0,
                        serialize_pipeline: Some(
                            Operator(
                                Operator {
                                    path: "map",
                                    args: [
                                        "| data | { hydroflow_plus :: runtime_support :: bincode :: serialize :: < (std :: string :: String , i32) > (& data) . unwrap () . into () }",
                                    ],
                                },
                            ),
                        ),
                        sink_expr: null,
                        source_expr: null,
                        deserialize_pipeline: Some(
                            Operator(
                                Operator {
                                    path: "map",
                                    args: [
                                        "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < (std :: string :: String , i32) > (& b) . unwrap ()) }",
                                    ],
                                },
                            ),
                        ),
                        input: PipelineOp {
                            kind: "inspect",
                            gen_pipeline: <function>,
                            input: PipelineOp {
                                kind: "fold_keyed",
                                gen_pipeline: <function>,
                                input: PipelineOp {
                                    kind: "map",
                                    gen_pipeline: <function>,
                                    input: Network {
                                        to_location: 1,
                                        serialize_pipeline: Some(
                                            Operator(
                                                Operator {
                                                    path: "map",
                                                    args: [
                                                        "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < std :: string :: String > (& data) . unwrap () . into ()) }",
                                                    ],
                                                },
                                            ),
                                        ),
                                        sink_expr: null,
                                        source_expr: null,
                                        deserialize_pipeline: Some(
                                            Operator(
                                                Operator {
                                                    path: "map",
                                                    args: [
                                                        "| res | { hydroflow_plus :: runtime_support :: bincode :: deserialize :: < std :: string :: String > (& res . unwrap ()) . unwrap () }",
                                                    ],
                                                },
                                            ),
                                        ),
                                        input: PipelineOp {
                                            kind: "map",
                                            gen_pipeline: <function>,
                                            input: PipelineOp {
                                                kind: "enumerate",
                                                gen_pipeline: <function>,
                                                input: PipelineOp {
                                                    kind: "map",
                                                    gen_pipeline: <function>,
                                                    input: Source {
                                                        source: Iter(
                                                            { use crate :: __staged :: cluster :: * ; vec ! ["abc" , "abc" , "xyz" , "abc"] },
                                                        ),
                                                        produces_delta: false,
                                                        location_id: 0,
                                                    },
                                                },
                                            },
                                        },
                                    },
                                },
                            },
                        },
                    },
                },
            ),
        },
    },
]
