---
source: hydroflow_plus_test/src/cluster.rs
expression: builder.extract().ir()
---
[
    ForEach {
        f: { use crate :: __staged :: cluster :: * ; | (id , d) | println ! ("node received: ({}, {:?})" , id , d) },
        input: Network {
            to_location: 0,
            serialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| data | { hydroflow_plus :: runtime_support :: bincode :: serialize :: < (u32 , i32) > (& data) . unwrap () . into () }",
                        ],
                    },
                ),
            ),
            sink_expr: null,
            source_expr: null,
            deserialize_pipeline: Some(
                Operator(
                    Operator {
                        path: "map",
                        args: [
                            "| res | { let (id , b) = res . unwrap () ; (id , hydroflow_plus :: runtime_support :: bincode :: deserialize :: < (u32 , i32) > (& b) . unwrap ()) }",
                        ],
                    },
                ),
            ),
            input: Inspect {
                f: { use crate :: __staged :: cluster :: * ; | n | println ! ("cluster received: {:?}" , n) },
                input: Network {
                    to_location: 1,
                    serialize_pipeline: Some(
                        Operator(
                            Operator {
                                path: "map",
                                args: [
                                    "| (id , data) | { (id , hydroflow_plus :: runtime_support :: bincode :: serialize :: < (u32 , i32) > (& data) . unwrap () . into ()) }",
                                ],
                            },
                        ),
                    ),
                    sink_expr: null,
                    source_expr: null,
                    deserialize_pipeline: Some(
                        Operator(
                            Operator {
                                path: "map",
                                args: [
                                    "| res | { hydroflow_plus :: runtime_support :: bincode :: deserialize :: < (u32 , i32) > (& res . unwrap ()) . unwrap () }",
                                ],
                            },
                        ),
                    ),
                    input: Map {
                        f: { use crate :: __staged :: cluster :: * ; | (id , n) | (id , (id , n)) },
                        input: CrossProduct(
                            Map {
                                f: { use crate :: __staged :: cluster :: * ; | & id | id },
                                input: Source {
                                    source: Iter(
                                        { use hydroflow_plus_cli_integration :: __staged :: deploy :: * ; panic ! () },
                                    ),
                                    location_id: 0,
                                },
                            },
                            Source {
                                source: Iter(
                                    { use crate :: __staged :: cluster :: * ; 0 .. 5 },
                                ),
                                location_id: 0,
                            },
                        ),
                    },
                },
            },
        },
    },
]
